function DoMsg_Model_Users() {
    var self = this;
    var doMsg = DoMessaging.getInstance();
    this.validUsers;
    this.invalidUsers;
    this.init = function () {
        self.validUsers = {};
        self.invalidUsers = {};
    };
    this.checkUsername = function (username, callback) {
        var result = null;
        if (username.length < 4 || typeof(self.invalidUsers[username]) !== 'undefined') {
            result = false;
        }
        else if (typeof(self.validUsers[username]) !== 'undefined') {
            result = true;
        }
        if (result !== null) {
            if (callback && typeof(callback) === 'function') {
                callback(username, true);
            }
            return result;
        }
        else {
            jQuery.ajax({
                type: 'POST',
                url: '/ajax/messaging.php',
                dataType: 'json',
                data: {command: "checkUsername", username: username},
                success: function (response) {
                    var list = (response.result == "OK") ? 'validUsers' : 'invalidUsers';
                    doMsg.usersModel[list][username] = true;
                    if (callback && typeof(callback) === 'function') {
                        callback(username, true);
                    }
                },
                error: doMsg.systemError
            });
        }
    };
}
function DoMsg_Model_Status() {
    var self = this;
    var doMsg = DoMessaging.getInstance();
    this.inboxUnread = null;
    this.inboxTotal = null;
    this.outboxTotal = null;
    this.notesCount = null;
    this.notesLimit = null;
    this.myUsername = null;
    this.clan = false;
    this.init = function () {
    };
    this.timer = function () {
        self.loadData();
    };
    this.parseInitData = function (initData) {
        self.inboxUnread = initData.inboxUnread;
        self.inboxTotal = initData.inboxTotal;
        self.outboxTotal = initData.outboxTotal;
        self.notesCount = initData.notesCount;
        self.notesLimit = initData.notesLimit;
        self.myUsername = initData.myUsername;
        self.clan = initData.clan;
        doMsg.statusModelUpdated(-1, -1, -1);
    };
    this.loadData = function () {
        var oldInboxUnread = self.inboxUnread;
        var oldInboxTotal = self.inboxTotal;
        var oldOutboxTotal = self.outboxTotal;
        jQuery.ajax({
            type: 'POST',
            url: '/ajax/messaging.php',
            dataType: 'json',
            data: {command: "push"},
            success: function (response) {
                if (response.result == 'OK') {
                    var statusModel = doMsg.statusModel;
                    statusModel.inboxUnread = response.inboxUnread;
                    statusModel.inboxTotal = response.inboxTotal;
                    statusModel.outboxTotal = response.outboxTotal;
                    statusModel.notesCount = response.notesCount;
                    statusModel.notesLimit = response.notesLimit;
                    statusModel.myUsername = response.myUsername;
                    statusModel.clan = response.clan;
                    doMsg.statusModelUpdated(statusModel.inboxUnread - oldInboxUnread, statusModel.inboxTotal - oldInboxTotal, statusModel.outboxTotal - oldOutboxTotal);
                }
                else {
                    doMsg.systemError();
                }
            },
            error: doMsg.systemError
        });
    };
}
function DoMsg_Model_Messages() {
    var self = this;
    var doMsg = DoMessaging.getInstance();
    this.inboxEntrys = [];
    this.outboxEntrys = [];
    this.inboxData = {};
    this.outboxData = {};
    this.initialInboxLoaded = false;
    this.initialOutboxLoaded = false;
    this.init = function () {
    }
    this.getInboxEntry = function (entryId) {
        if (self.inboxData[entryId] == null) {
            alert('Error');
            return;
        }
        return self.inboxData[entryId];
    };
    this.addInboxEntry = function (entry) {
        for (var i in self.inboxEntrys) {
            if (self.inboxEntrys[i] == entry.entryId) {
                self.inboxData[entry.entryId] = entry;
                return;
            }
        }
        self.inboxEntrys.push(entry.entryId);
        self.inboxData[entry.entryId] = entry;
        self.inboxEntrys.sort(doMsg.helperObject.numberSort).reverse();
    };
    this.setInboxEntryRead = function (entryId, callback) {
        var entry = self.inboxData[entryId];
        if (entry != null && entry.status == 2) {
            jQuery.ajax({
                type: 'POST',
                url: '/ajax/messaging.php',
                dataType: 'json',
                data: {command: "inboxRead", entryId: entryId},
                success: function (response) {
                    if (response.result == 'OK') {
                        doMsg.messagesModel.inboxData[entryId]['status'] = 3;
                        doMsg.statusModel.inboxUnread = response.inboxUnread;
                        if (callback && typeof(callback) === 'function') {
                            callback();
                        }
                        doMsg.statusModelUpdated(1, -1, -1);
                    }
                    else {
                        doMsg.systemError();
                    }
                },
                error: doMsg.systemError
            });
        }
    };
    this.multiDeleteInboxEntrys = function (entryIds, callback) {
        jQuery.ajax({
            type: 'POST',
            url: '/ajax/messaging.php',
            dataType: 'json',
            data: {command: "inboxMultiDelete", entryIds: entryIds},
            success: function (response) {
                if (response.result == 'OK') {
                    for (var i in entryIds) {
                        doMsg.messagesModel.removeInboxEntry(entryIds[i]);
                    }
                    doMsg.statusModel.inboxTotal = response.inboxTotal;
                    doMsg.statusModel.inboxUnread = response.inboxUnread;
                    if (callback && typeof(callback) === 'function') {
                        callback();
                    }
                    doMsg.statusModelUpdated(-1, -1, -1);
                    doMsg.messagesModelInboxUpdated();
                }
                else {
                    doMsg.systemError();
                }
            },
            error: doMsg.systemError
        });
    };
    this.deleteInboxEntry = function (entryId, callback) {
        var entry = self.inboxData[entryId];
        if (entry != null) {
            jQuery.ajax({
                type: 'POST',
                url: '/ajax/messaging.php',
                dataType: 'json',
                data: {command: "inboxDelete", entryId: entryId},
                success: function (response) {
                    if (response.result == 'OK') {
                        doMsg.messagesModel.removeInboxEntry(entryId);
                        doMsg.statusModel.inboxTotal = response.inboxTotal;
                        doMsg.statusModel.inboxUnread = response.inboxUnread;
                        if (callback && typeof(callback) === 'function') {
                            callback();
                        }
                        doMsg.statusModelUpdated(-1, -1, -1);
                        doMsg.messagesModelInboxUpdated();
                    } else {
                        doMsg.systemError();
                    }
                },
                error: doMsg.systemError
            });
        }
    };
    this.removeInboxEntry = function (entryId) {
        var newEntrys = [];
        var newData = {};
        for (var i in self.inboxEntrys) {
            var myEntryId = self.inboxEntrys[i];
            if (entryId != myEntryId) {
                newEntrys.push(myEntryId);
                newData[myEntryId] = self.inboxData[myEntryId];
            }
        }
        self.inboxEntrys = newEntrys;
        self.inboxData = newData;
        self.inboxEntrys.sort(doMsg.helperObject.numberSort).reverse();
    };
    this.getOutboxEntry = function (entryId) {
        if (self.outboxData[entryId] == null) {
            alert('Error');
            return;
        }
        return self.outboxData[entryId];
    };
    this.addOutboxEntry = function (entry) {
        for (var i in self.outboxEntrys) {
            if (self.outboxEntrys[i] == entry.entryId) {
                self.outboxData[entry.entryId] = entry;
                return;
            }
        }
        self.outboxEntrys.push(entry.entryId);
        self.outboxData[entry.entryId] = entry;
        self.outboxEntrys.sort(doMsg.helperObject.numberSort).reverse();
    };
    this.multiDeleteOutboxEntrys = function (entryIds, callback) {
        jQuery.ajax({
            type: 'POST',
            url: '/ajax/messaging.php',
            dataType: 'json',
            data: {command: "outboxMultiDelete", entryIds: entryIds},
            success: function (response) {
                if (response.result == 'OK') {
                    for (var i in entryIds) {
                        doMsg.messagesModel.removeOutboxEntry(entryIds[i]);
                    }
                    doMsg.statusModel.outboxTotal = response.outboxTotal;
                    if (callback && typeof(callback) === 'function') {
                        callback();
                    }
                    doMsg.statusModelUpdated(-1, -1, -1);
                    doMsg.messagesModelOutboxUpdated();
                }
                else {
                    doMsg.systemError();
                }
            },
            error: doMsg.systemError
        });
    };
    this.deleteOutboxEntry = function (entryId, callback) {
        var entry = self.outboxData[entryId];
        if (entry != null) {
            jQuery.ajax({
                type: 'POST',
                url: '/ajax/messaging.php',
                dataType: 'json',
                data: {command: "outboxDelete", entryId: entryId},
                success: function (response) {
                    if (response.result == 'OK') {
                        doMsg.messagesModel.removeOutboxEntry(entryId);
                        doMsg.statusModel.outboxTotal = response.outboxTotal;
                        if (callback && typeof(callback) === 'function') {
                            callback();
                        }
                        doMsg.statusModelUpdated(-1, -1, -1);
                        doMsg.messagesModelOutboxUpdated();
                    }
                    else {
                        doMsg.systemError();
                    }
                },
                error: doMsg.systemError
            });
        }
    };
    this.removeOutboxEntry = function (entryId) {
        var newEntrys = [];
        var newData = {};
        for (var i in self.outboxEntrys) {
            var myEntryId = self.outboxEntrys[i];
            if (entryId != myEntryId) {
                newEntrys.push(myEntryId);
                newData[myEntryId] = self.outboxData[myEntryId];
            }
        }
        self.outboxEntrys = newEntrys;
        self.outboxData = newData;
        self.outboxEntrys.sort(doMsg.helperObject.numberSort).reverse();
    };
    this.parseInboxInitData = function (initData) {
        for (var i in initData.entrys) {
            var entry = initData.entrys[i];
            doMsg.messagesModel.addInboxEntry(entry);
        }
        doMsg.messagesModel.initialInboxLoaded = true;
        doMsg.messagesModelInboxUpdated();
    };
    this.loadInboxData = function (offset, limit, callback) {
        jQuery.ajax({
            type: 'POST',
            url: '/ajax/messaging.php',
            dataType: 'json',
            data: {command: "inboxGet", offset: offset, limit: limit},
            success: function (response) {
                if (response.result == 'OK') {
                    for (var i in response.entrys) {
                        var entry = response.entrys[i];
                        doMsg.messagesModel.addInboxEntry(entry);
                    }
                    if (callback && typeof(callback) === 'function') {
                        callback();
                    }
                    doMsg.messagesModelInboxUpdated();
                }
                else {
                    doMsg.systemError();
                }
            },
            error: doMsg.systemError
        });
    };
    this.parseOutboxInitData = function (initData) {
        for (var i in initData.entrys) {
            var entry = initData.entrys[i];
            doMsg.messagesModel.addOutboxEntry(entry);
        }
        doMsg.messagesModel.initialOutboxLoaded = true;
        doMsg.messagesModelOutboxUpdated();
    };
    this.loadOutboxData = function (offset, limit, callback) {
        jQuery.ajax({
            type: 'POST',
            url: '/ajax/messaging.php',
            dataType: 'json',
            data: {command: "outboxGet", offset: offset, limit: limit},
            success: function (response) {
                if (response.result == 'OK') {
                    for (var i in response.entrys) {
                        var entry = response.entrys[i];
                        doMsg.messagesModel.addOutboxEntry(entry);
                    }
                    if (callback && typeof(callback) === 'function') {
                        callback();
                    }
                    doMsg.messagesModelOutboxUpdated();
                }
                else {
                    doMsg.systemError();
                }
            },
            error: doMsg.systemError
        });
    };
    this.send = function (parentType, parentId, recipientType, recipients, subject, body, callback, blacklistCallback, blockmessagesCallback, spammessagesCallback) {
        jQuery.ajax({
            type: 'POST',
            url: '/ajax/messaging.php',
            dataType: 'json',
            data: {
                command: "send",
                parentType: parentType,
                parentId: parentId,
                recipientType: recipientType,
                recipients: recipients,
                subject: subject,
                body: body
            },
            success: function (response) {
                if (response.result == 'OK') {
                    doMsg.timerTick();
                    if (callback && typeof(callback) === 'function') {
                        callback();
                    }
                }
                else {
                    if (response.blacklist && blacklistCallback && typeof(blacklistCallback) === 'function') {
                        blacklistCallback();
                    }
                    else if (response.blocked && blockmessagesCallback && typeof(blockmessagesCallback) === 'function') {
                        blockmessagesCallback();
                    }
                    else if (response.spam && spammessagesCallback && typeof(spammessagesCallback) === 'function') {
                        spammessagesCallback();
                    }
                    else {
                        doMsg.systemError();
                    }
                }
            },
            error: doMsg.systemError
        });
    };
}
function DoMsg_Model_Contacts() {
    var self = this;
    var doMsg = DoMessaging.getInstance();
    this.avatars = {};
    this.requests;
    this.friends;
    this.friendIDs_base62;
    this.titles;
    this.status;
    this.init = function () {
    };
    this.setAvatar = function (userHash, avatarUrl) {
        self.avatars[userHash] = avatarUrl;
    };
    this.addRequest = function (username) {
        for (var i in self.requests) {
            if (self.requests[i] == username) {
                return;
            }
        }
        self.requests.push(username);
        self.requests.sort();
    };
    this.removeRequest = function (userHash) {
        var newRequests = [];
        if (jQuery.isArray(userHash)) {
            dance:for (var i in userHash) {
                for (var j in self.requests) {
                    if (self.requests[j] == userHash[i]) {
                        break dance;
                    }
                }
                newRequests.push(self.requests[j]);
            }
        }
        else {
            for (var i in self.requests) {
                if (self.requests[i] != userHash) {
                    newRequests.push(self.requests[i]);
                }
            }
        }
        self.requests = newRequests;
    };
    this.confirmRequest = function (userHash, callback) {
        jQuery.ajax({
            type: 'POST',
            url: '/ajax/messaging.php',
            dataType: 'json',
            data: {command: "contactsRequestConfirm", userHash: userHash},
            success: function (response) {
                if (response.result == 'OK') {
                    doMsg.contactsModel.removeRequest(userHash);
                    doMsg.contactsModel.addFriend(userHash);
                    if (callback && typeof(callback) === 'function') {
                        callback(userHash);
                    }
                    doMsg.contactsModelUpdated();
                }
                else {
                    doMsg.systemError();
                }
            },
            error: doMsg.systemError
        });
    };
    this.declineRequest = function (userHash, callback) {
        jQuery.ajax({
            type: 'POST',
            url: '/ajax/messaging.php',
            dataType: 'json',
            data: {command: "contactsRequestDecline", userHash: userHash},
            success: function (response) {
                if (response.result == 'OK') {
                    doMsg.contactsModel.removeRequest(userHash);
                    if (callback && typeof(callback) === 'function') {
                        callback(userHash);
                    }
                    doMsg.contactsModelUpdated();
                }
                else {
                    doMsg.systemError();
                }
            },
            error: doMsg.systemError
        });
    };
    this.cancelInvitation = function (userHash, callback) {
        jQuery.ajax({
            type: 'POST',
            url: '/ajax/messaging.php',
            dataType: 'json',
            data: {command: "cancelInvitation", userHash: userHash},
            success: function (response) {
                if (response.result == 'OK') {
                    doMsg.contactsModel.removeRequest(userHash);
                    if (callback && typeof(callback) === 'function') {
                        callback(userHash);
                    }
                    doMsg.contactsModelUpdated();
                }
                else {
                    doMsg.systemError();
                }
            },
            error: doMsg.systemError
        });
    };
    this.cancelFriendship = function (userHash, callback) {
        jQuery.ajax({
            type: 'POST',
            url: '/ajax/messaging.php',
            dataType: 'json',
            data: {command: "contactsCancel", userHash: userHash},
            success: function (response) {
                if (response.result == 'OK') {
                    doMsg.contactsModel.removeFriend(userHash);
                    if (callback && typeof(callback) === 'function') {
                        callback(userHash);
                    }
                    doMsg.contactsModelUpdated();
                }
                else {
                    doMsg.systemError();
                }
            },
            error: doMsg.systemError
        });
    };
    this.unblockAllInvitations = function (callback) {
        console.log('start blockcall');
        jQuery.ajax({
            type: 'POST',
            url: '/ajax/messaging.php',
            dataType: 'json',
            data: {command: "unblockAllInvitations"},
            success: function (response) {
                doMsg.hideLoader();
                if (response.result == 'OK') {
                    if (callback && typeof(callback) === 'function') {
                        callback();
                    }
                    doMsg.contactsModelUpdated();
                }
                else {
                    doMsg.systemError();
                }
                doMsg.hideLoader();
            },
            error: doMsg.systemError
        });
    };
    this.blockAllInvitations = function (callback) {
        jQuery.ajax({
            type: 'POST',
            url: '/ajax/messaging.php',
            dataType: 'json',
            data: {command: "blockAllInvitations"},
            success: function (response) {
                doMsg.hideLoader();
                if (response.result == 'OK') {
                    userHashArray = new Array();
                    jQuery.each(jQuery('.username-invite'), function () {
                        userHashArray.push(jQuery(this).parent().attr('entryid'));
                    });
                    doMsg.contactsModel.removeRequest(userHashArray);
                    if (callback && typeof(callback) === 'function') {
                        callback();
                    }
                    doMsg.contactsModelUpdated();
                }
                else {
                    doMsg.systemError();
                }
            },
            error: doMsg.systemError
        });
    };
    this.addFriend = function (userHash) {
        for (var i in self.friends) {
            if (self.friends[i] == userHash) {
                return;
            }
        }
        self.friends.push(userHash);
    };
    this.addUsernames = function (userHash, username) {
        for (var i in self.usernames) {
            if (self.usernames[i] == userHash) {
                return;
            }
        }
        self.usernames[userHash] = username;
    };
    this.addTitle = function (userHash, title) {
        for (var i in self.titles) {
            if (self.titles[i] == userHash) {
                return;
            }
        }
        self.titles[userHash] = title;
    };
    this.addStatus = function (userHash, status) {
        for (var i in self.status) {
            if (self.status[i] == userHash) {
                return;
            }
        }
        self.status[userHash] = status;
    };
    this.removeFriend = function (userHash) {
        var newFriends = [];
        for (var i in self.friends) {
            if (self.friends[i] == userHash) {
                continue;
            }
            newFriends.push(self.friends[i]);
        }
        self.friends = newFriends;
    };
    this.parseInitData = function (initData) {
        var contactsModel = doMsg.contactsModel;
        contactsModel.requests = [];
        contactsModel.friends = [];
        contactsModel.usernames = [];
        contactsModel.titles = [];
        contactsModel.status = [];
        for (var i in initData.requests) {
            contactsModel.addRequest(initData.requests[i]);
        }
        for (var i in initData.friends) {
            contactsModel.addFriend(initData.friends[i]);
        }
        for (var i in initData.usernames) {
            contactsModel.addUsernames(i, initData.usernames[i]);
        }
        for (var i in initData.titles) {
            contactsModel.addTitle(i, initData.titles[i]);
        }
        for (var i in initData.status) {
            contactsModel.addStatus(i, initData.status[i]);
        }
        for (var i in initData.avatars) {
            contactsModel.setAvatar(i, initData.avatars[i]);
        }
        doMsg.contactsModelUpdated();
    };
    this.loadData = function () {
        jQuery.ajax({
            type: 'POST',
            url: '/ajax/messaging.php',
            dataType: 'json',
            data: {command: "contactsGet"},
            success: function (response) {
                if (response.result == 'OK') {
                    self.parseInitData(response);
                }
                else {
                    doMsg.systemError();
                }
            },
            error: doMsg.systemError
        });
    };
}
function DoMsg_Model_Notes() {
    var self = this;
    var doMsg = DoMessaging.getInstance();
    this.entrys;
    this.data;
    this.init = function () {
    };
    this.add = function (entry) {
        for (var i in self.entrys) {
            if (self.entrys[i] == entry.noteId) {
                return;
            }
        }
        self.entrys.push(entry.noteId);
        self.data[entry.noteId] = entry;
        self.entrys.sort(doMsg.helperObject.numberSort).reverse();
    };
    this.remove = function (noteId) {
        var newEntrys = [];
        var newData = {};
        for (var i in self.entrys) {
            var myNoteId = self.entrys[i];
            if (noteId != myNoteId) {
                newEntrys.push(myNoteId);
                newData[myNoteId] = self.data[myNoteId];
            }
        }
        self.entrys = newEntrys;
        self.data = newData;
        self.entrys.sort(doMsg.helperObject.numberSort).reverse();
    };
    this.create = function (subject, body, callback) {
        jQuery.ajax({
            type: 'POST',
            url: '/ajax/messaging.php',
            dataType: 'json',
            data: {command: "noteCreate", subject: subject, body: body},
            success: function (response) {
                if (response.result == 'OK') {
                    for (var i in response.entrys) {
                        doMsg.notesModel.add(response.entrys[i]);
                    }
                    doMsg.statusModel.notesCount = response.notesCount;
                    doMsg.statusModel.notesLimit = response.notesLimit;
                    if (callback && typeof(callback) === "function") {
                        callback(response.noteId);
                    }
                    doMsg.notesModelUpdated();
                }
                else {
                    doMsg.systemError();
                }
            },
            error: doMsg.systemError
        });
    };
    this.set = function (noteId, subject, body, callback) {
        jQuery.ajax({
            type: 'POST',
            url: '/ajax/messaging.php',
            dataType: 'json',
            data: {command: "noteSet", noteId: noteId, subject: subject, body: body},
            success: function (response) {
                if (response.result == 'OK') {
                    doMsg.notesModel.remove(noteId);
                    for (var i in response.entrys) {
                        doMsg.notesModel.add(response.entrys[i]);
                    }
                    doMsg.statusModel.notesCount = response.notesCount;
                    doMsg.statusModel.notesLimit = response.notesLimit;
                    if (callback && typeof(callback) === "function") {
                        callback(response.noteId);
                    }
                    doMsg.notesModelUpdated();
                }
                else {
                    doMsg.systemError();
                }
            },
            error: doMsg.systemError
        });
    };
    this.deleteEntry = function (noteId, callback) {
        jQuery.ajax({
            type: 'POST',
            url: '/ajax/messaging.php',
            dataType: 'json',
            data: {command: "noteDelete", noteId: noteId},
            success: function (response) {
                if (response.result == 'OK') {
                    doMsg.notesModel.remove(noteId);
                    doMsg.statusModel.notesCount = response.notesCount;
                    doMsg.statusModel.notesLimit = response.notesLimit;
                    if (callback && typeof(callback) === "function") {
                        callback(noteId);
                    }
                    doMsg.notesModelUpdated();
                }
                else {
                    doMsg.systemError();
                }
            },
            error: doMsg.systemError
        });
    };
    this.parseInitData = function (initData) {
        doMsg.notesModel.entrys = [];
        doMsg.notesModel.data = {};
        for (var i in initData.entrys) {
            doMsg.notesModel.add(initData.entrys[i]);
        }
        doMsg.notesModelUpdated();
    };
    this.loadData = function () {
        jQuery.ajax({
            type: 'POST',
            url: '/ajax/messaging.php',
            dataType: 'json',
            data: {command: "notesGet"},
            success: function (response) {
                if (response.result == 'OK') {
                    self.parseInitData(response);
                }
                else {
                    doMsg.systemError();
                }
            },
            error: doMsg.systemError
        });
    };
}
function DoMsg_Model_Blacklist() {
    var self = this;
    var doMsg = DoMessaging.getInstance();
    this.entrys;
    this.init = function () {
    };
    this.add = function (entry) {
        for (var i in self.entrys) {
            if (self.entrys[i] == entry) {
                return;
            }
        }
        self.entrys.push(entry);
        self.entrys.sort(doMsg.helperObject.numberSort).reverse();
    };
    this.remove = function (entry) {
        var newEntrys = [];
        for (var i in self.entrys) {
            var myEntry = self.entrys[i];
            if (entry != myEntry) {
                newEntrys.push(myEntry);
            }
        }
        self.entrys = newEntrys;
        self.entrys.sort(doMsg.helperObject.numberSort).reverse();
    };
    this.create = function (username, callback) {
        jQuery.ajax({
            type: 'POST',
            url: '/ajax/messaging.php',
            dataType: 'json',
            data: {command: "blacklistAdd", username: username},
            success: function (response) {
                if (response.result == 'OK') {
                    doMsg.blacklistModel.add(username);
                    if (callback && typeof(callback) === "function") {
                        callback(username);
                    }
                    doMsg.blacklistModelUpdated();
                }
                else {
                    doMsg.systemError();
                }
            },
            error: doMsg.systemError
        });
    };
    this.deleteEntry = function (username, callback) {
        jQuery.ajax({
            type: 'POST',
            url: '/ajax/messaging.php',
            dataType: 'json',
            data: {command: "blacklistRemove", username: username},
            success: function (response) {
                if (response.result == 'OK') {
                    doMsg.blacklistModel.remove(username);
                    if (callback && typeof(callback) === "function") {
                        callback(username);
                    }
                    doMsg.blacklistModelUpdated();
                }
                else {
                    doMsg.systemError();
                }
            },
            error: doMsg.systemError
        });
    };
    this.parseInitData = function (initData) {
        doMsg.blacklistModel.entrys = [];
        for (var i in initData.entrys) {
            doMsg.blacklistModel.add(initData.entrys[i]);
        }
        doMsg.blacklistModelUpdated();
    };
    this.loadData = function () {
        jQuery.ajax({
            type: 'POST',
            url: '/ajax/messaging.php',
            dataType: 'json',
            data: {command: "blacklistGet"},
            success: function (response) {
                if (response.result == 'OK') {
                    self.parseInitData(response);
                }
                else {
                    doMsg.systemError();
                }
            },
            error: doMsg.systemError
        });
    };
}
function DoMsg_Controller_FolderView() {
    var self = this;
    var doMsg = DoMessaging.getInstance();
    this.eventsBinded = false;
    this.currentFolder = null;
    this.currentFilter = 'none';
    this.maxInboxPage = 0;
    this.maxOutboxPage = 0;
    this.currentPage = 1;
    this.entryFilters = {
        unread: function (inboxDate) {
            return inboxDate.status == 2;
        }, read: function (inboxDate) {
            return inboxDate.status == 3;
        }, answered: function (inboxDate) {
            return inboxDate.status == 4;
        }, user: function (inboxDate) {
            return inboxDate.type == 10;
        }, clan: function (inboxDate) {
            return inboxDate.type == 20;
        }, system: function (inboxDate) {
            return inboxDate.type == 50;
        }, auction: function (inboxDate) {
            return inboxDate.type == 60;
        }, info: function (inboxDate) {
            return inboxDate.type == 70;
        }
    };
    this.init = function () {
        self.bindEvents();
    };
    this.bindEvents = function () {
        if (self.eventsBinded) {
            return;
        }
        jQuery('#domsg_messages_checkboxAll').bind({
            click: self.checkboxAllClicked,
            mouseover: doMsg.helperObject.buttonCheckboxMouseover,
            mouseout: doMsg.helperObject.buttonCheckboxMouseout
        }).qtip({content: doMsg.translations['messaging_tooltip_selectAll'], style: 'domsg'});
        jQuery('#domsg_messages_deleteChecked').bind({
            click: self.multiDeleteClicked,
            mouseover: doMsg.helperObject.iconTrashMouseover,
            mouseout: doMsg.helperObject.iconTrashMouseout
        }).qtip({content: doMsg.translations['messaging_tooltip_deleteSelected'], style: 'domsg'});
        var domsg_messages_dropdown = jQuery('#domsg_messages_dropdown');
        var domsg_messages_dropdownLayer = jQuery('#domsg_messages_dropdownLayer');
        domsg_messages_dropdown.bind({
            click: function () {
                domsg_messages_dropdownLayer.toggleClass('hidden');
            },
            mouseover: doMsg.helperObject.buttonDropdownMouseover,
            mouseout: doMsg.helperObject.buttonDropdownMouseout
        });
        domsg_messages_dropdownLayer.empty().append(jQuery('<div />').attr('rel', 'none').text(doMsg.translations['messaging_filter_all'] || ''), jQuery('<div />').attr('rel', 'unread').text(doMsg.translations['messaging_filter_unread'] || ''), jQuery('<div />').attr('rel', 'clan').text(doMsg.translations['messaging_filter_clan'] || ''), jQuery('<div />').attr('rel', 'system').text(doMsg.translations['messaging_filter_system'] || ''), jQuery('<div />').attr('rel', 'auction').text(doMsg.translations['messaging_filter_auction'] || ''), jQuery('<div />').attr('rel', 'info').text(doMsg.translations['messaging_filter_info'] || '')).children().bind({
            click: function () {
                var option = jQuery(this);
                doMsg.folderViewController.switchFilter(option.attr('rel'));
                domsg_messages_dropdown.text(option.text());
                domsg_messages_dropdownLayer.addClass('hidden');
            }, mouseover: function () {
                jQuery(this).addClass('rollover');
            }, mouseout: function () {
                jQuery(this).removeClass('rollover');
            }
        });
        jQuery('#domsg_messages_pageLeft').bind({
            click: self.previousPageClicked,
            mouseover: doMsg.helperObject.buttonLeftMouseover,
            mouseout: doMsg.helperObject.buttonLeftMouseout
        });
        jQuery('#domsg_messages_pageRight').bind({
            click: self.nextPageClicked,
            mouseover: doMsg.helperObject.buttonRightMouseover,
            mouseout: doMsg.helperObject.buttonRightMouseout
        });
        jQuery('#domsg_messages_new').bind({
            click: function () {
                doMsg.messageWriteViewController.parentPage = (doMsg.folderViewController.currentFolder == 'inbox') ? 'folderViewInbox' : 'folderViewOutbox';
                doMsg.messageWriteViewController.clear();
                doMsg.switchToMessageWriteView();
                jQuery('#domsg_msgwrite_txtCounter').html('');
                jQuery('#reCaptcha').hide();
            },
            mouseover: doMsg.helperObject.buttonBigGreenMouseover,
            mouseout: doMsg.helperObject.buttonBigGreenMouseout
        });
        self.eventsBinded = true;
    };
    this.show = function () {
        jQuery('#folderView').removeClass('hidden');
    };
    this.hide = function () {
        jQuery('#folderView').addClass('hidden');
    };
    this.statsUpdated = function (inboxDiff, outboxDiff) {
        self.calcPages();
        self.updatePageSwitch();
        if (inboxDiff > 0 && doMsg.messagesModel.initialInboxLoaded) {
            doMsg.messagesModel.loadInboxData(0, inboxDiff, self.updateInboxView);
        }
        if (outboxDiff > 0 && doMsg.messagesModel.initialOutboxLoaded) {
            doMsg.messagesModel.loadOutboxData(0, outboxDiff, self.updateOutboxView);
        }
    };
    this.checkboxAllClicked = function () {
        var elem = jQuery(this);
        if (elem.hasClass('button-checkbox-checked')) {
            jQuery('#folderViewEntrys').children().children('.checkbox').each(function () {
                jQuery(this).removeClass('checkbox-checked');
            });
            elem.removeClass('button-checkbox-checked');
        }
        else {
            jQuery('#folderViewEntrys').children().children('.checkbox').each(function () {
                jQuery(this).addClass('checkbox-checked');
            });
            elem.addClass('button-checkbox-checked');
        }
    };
    this.multiDeleteClicked = function () {
        var entryIds = [];
        jQuery('#folderViewEntrys').children().children('.checkbox').each(function () {
            var elem = jQuery(this);
            if (elem.hasClass('checkbox-checked')) {
                entryIds.push(elem.parent().attr('entryId'));
            }
        });
        if (entryIds.length < 1) {
            return;
        }
        var layerId = 'domsg_messages_layerConfirmMultiDelete';
        var closeFunction = function () {
            jQuery('#' + layerId + '-container').remove();
            jQuery('#' + layerId).remove();
        };
        doMsg.layerCreator.createConfirmLayer(layerId, doMsg.translations['messaging_confirmLayer_messageMultiDelete_title'], doMsg.translations['messaging_confirmLayer_messageMultiDelete_text'], closeFunction, function () {
            doMsg.showLoader();
            if (doMsg.folderViewController.currentFolder == 'inbox') {
                doMsg.messagesModel.multiDeleteInboxEntrys(entryIds, function () {
                    doMsg.hideLoader();
                    closeFunction();
                    jQuery('#domsg_messages_checkboxAll').removeClass('button-checkbox-checked');
                });
            }
            else {
                doMsg.messagesModel.multiDeleteOutboxEntrys(entryIds, function () {
                    doMsg.hideLoader();
                    closeFunction();
                });
            }
        }, closeFunction);
    };
    this.open = function (entryId) {
        var entryDiv = jQuery('#folderView_entry_' + entryId);
        entryDiv.removeClass('entryClosed').addClass('entryOpen');
        var openBodyDiv = jQuery('#folderView_entry_' + entryId + '_openBody');
        var openBodyHeight = openBodyDiv.height();
        var limitSpace = 60;
        var data = (self.currentFolder == 'inbox') ? 'inboxData' : 'outboxData';
        var entry = doMsg.messagesModel[data][entryId];
        if (self.entryFilters.system(entry) || self.entryFilters.auction(entry) || self.entryFilters.info(entry)) {
            limitSpace = 45;
        }
        if (openBodyHeight > limitSpace) {
            entryDiv.css('height', entryDiv.height() + openBodyHeight - limitSpace);
        }
    };
    this.close = function (entryId) {
        var entryDiv = jQuery('#folderView_entry_' + entryId);
        if (!entryDiv.hasClass('entryOpen')) {
            return;
        }
        jQuery('#folderView_entry_' + entryId + '_answerPopup').addClass('hidden');
        entryDiv.css('height', '').removeClass('entryOpen').addClass('entryClosed');
    };
    this.setAsReaded = function (entryId) {
        var entryDiv = jQuery('#folderView_entry_' + entryId);
        if (self.currentFolder == 'inbox' && entryDiv.hasClass('entryUnread')) {
            doMsg.messagesModel.setInboxEntryRead(entryId, function () {
                entryDiv.removeClass('entryUnread');
                jQuery('#folderView_entry_' + entryId + '_closedStatus').addClass('icon-status-read');
            });
        }
    };
    this.closeAll = function () {
        jQuery('#folderViewEntrys').children('.entry').each(function (index, elm) {
            doMsg.folderViewController.close(jQuery(elm).attr('entryId'));
        });
    };
    this.switchFilter = function (newFilter) {
        var valid = ['none', 'unread', 'clan', 'system', 'auction', 'info'];
        if (self.currentFolder != 'inbox' || jQuery.inArray(newFilter, valid) < 0 || self.currentFilter == newFilter) {
            return;
        }
        self.currentPage = 1;
        self.currentFilter = newFilter;
        var loadedLength = doMsg.messagesModel.inboxEntrys.length;
        var totalLength = doMsg.statusModel.inboxTotal;
        if (loadedLength < totalLength) {
            var itemsToLoad = totalLength - loadedLength;
            doMsg.showLoader();
            doMsg.messagesModel.loadInboxData(loadedLength, itemsToLoad, function () {
                doMsg.hideLoader();
                doMsg.folderViewController.calcPages();
                doMsg.folderViewController.updateInboxView();
                doMsg.folderViewController.updatePageSwitch();
            });
        }
        else {
            self.calcPages();
            self.updateInboxView();
            self.updatePageSwitch();
        }
    };
    this.switchFolder = function (newFolder) {
        if ((newFolder != 'inbox' && newFolder != 'outbox') || self.currentFolder == newFolder) {
            return;
        }
        self.currentPage = 1;
        jQuery('#domsg_messages_dropdownLayer').addClass('hidden');
        jQuery('#domsg_messages_dropdown').toggleClass('hidden', newFolder == 'outbox');
        self.currentFolder = newFolder;
        if (newFolder == 'inbox') {
            self.updateInboxView();
        }
        else if (newFolder == 'outbox') {
            self.updateOutboxView();
        }
        self.updatePageSwitch();
    }
    this.openClicked = function () {
        var entryId = jQuery(this).parent().attr('entryId');
        doMsg.folderViewController.setAsReaded(entryId);
        doMsg.folderViewController.closeAll();
        doMsg.folderViewController.open(entryId);
    }
    this.closeClicked = function () {
        doMsg.folderViewController.close(jQuery(this).parent().attr('entryId'));
    }
    this.deleteClicked = function () {
        var entryId = jQuery(this).parent().attr('entryId');
        var layerId = 'domsg_messages_layerConfirmDelete';
        var method = null;
        var closeFunction = function () {
            jQuery('#' + layerId + '-container').remove();
            jQuery('#' + layerId).remove();
        };
        if (doMsg.folderViewController.currentFolder == 'inbox') {
            method = doMsg.messagesModel.deleteInboxEntry;
        }
        else if (doMsg.folderViewController.currentFolder == 'outbox') {
            method = doMsg.messagesModel.deleteOutboxEntry;
        }
        if (method != null) {
            doMsg.layerCreator.createConfirmLayer(layerId, doMsg.translations['messaging_confirmLayer_messageDelete_title'], doMsg.translations['messaging_confirmLayer_messageDelete_text'], closeFunction, function () {
                doMsg.showLoader();
                method(entryId, function () {
                    doMsg.hideLoader();
                    closeFunction();
                });
            }, closeFunction);
        }
    };
    this.answerTriangleClicked = function () {
        var entryId = jQuery(this).parent().parent().attr('entryId');
        jQuery('#folderView_entry_' + entryId + '_answerPopup').toggleClass('hidden');
    };
    this.calcPages = function () {
        var count = 0;
        var filter = self.entryFilters[self.currentFilter];
        if (filter) {
            var messagesModel = doMsg.messagesModel;
            for (var i in messagesModel.inboxEntrys) {
                if (filter(messagesModel.inboxData[messagesModel.inboxEntrys[i]])) {
                    count++;
                }
            }
        }
        else {
            count += doMsg.statusModel.inboxTotal;
        }
        self.inboxTotal = count;
        self.maxInboxPage = Math.ceil(count / 15);
        self.maxOutboxPage = Math.ceil(doMsg.statusModel.outboxTotal / 15);
    };
    this.updatePageSwitch = function () {
        var isInbox = (self.currentFolder == 'inbox');
        var maxPage = (isInbox) ? self.maxInboxPage : self.maxOutboxPage;
        var maxIndex = (isInbox) ? self.inboxTotal || 0 : doMsg.statusModel.outboxTotal;
        var isFirstPage = (self.currentPage <= 1);
        var isLastPage = (self.currentPage >= maxPage);
        var pageInfoText = doMsg.translations['messaging_common_pageInfo'].replace(/%start%/g, Math.min(self.currentPage * 15 - 14, maxIndex)).replace(/%end%/g, Math.min(self.currentPage * 15, maxIndex)).replace(/%total%/g, maxIndex);
        jQuery('#domsg_messages_pageLeft').toggleClass('button-left-disabled', isFirstPage);
        jQuery('#domsg_messages_pageRight').toggleClass('button-right-disabled', isLastPage);
        jQuery('#domsg_messages_pageInfo').text(pageInfoText);
        jQuery('#domsg_messages_pageNavigation').toggle(!(isFirstPage && isLastPage));
    };
    this.switchPage = function (newPage) {
        var isInbox = (self.currentFolder == 'inbox');
        var maxPage = (isInbox) ? self.maxInboxPage : self.maxOutboxPage;
        if (maxPage > 1) {
            newPage = Math.max(1, Math.min(newPage, maxPage));
            self.currentPage = newPage;
            self.updatePageSwitch();
            if (isInbox) {
                self.updateInboxView();
            }
            else {
                self.updateOutboxView();
            }
            var loaded = (isInbox) ? doMsg.messagesModel.inboxEntrys : doMsg.messagesModel.outboxEntrys;
            var pagesLoaded = Math.ceil(loaded.length / 15);
            var pagesToLoad = Math.min(self.currentPage + 2, maxPage);
            if (pagesLoaded < pagesToLoad) {
                var offset = pagesLoaded * 15;
                var limit = (pagesToLoad - pagesLoaded) * 15;
                if (isInbox) {
                    doMsg.messagesModel.loadInboxData(offset, limit, function () {
                    });
                }
                else {
                    doMsg.messagesModel.loadOutboxData(offset, limit, function () {
                    });
                }
            }
        }
    };
    this.previousPageClicked = function () {
        self.switchPage(self.currentPage - 1);
    };
    this.nextPageClicked = function () {
        self.switchPage(self.currentPage + 1);
    };
    this.saveAsNoteClicked = function () {
        var notesLimit = doMsg.statusModel.notesLimit;
        if (doMsg.statusModel.notesCount >= notesLimit) {
            var layerId = 'domsg_notes_limitReached';
            var closeFunction = function () {
                jQuery('#' + layerId + '-container').remove();
                jQuery('#' + layerId).remove();
            };
            doMsg.layerCreator.createErrorLayer(layerId, doMsg.translations['messaging_errorLayer_notesLimitReached_title'], doMsg.translations['messaging_errorLayer_notesLimitReached_text'].replace(/%notesLimit%/g, notesLimit), closeFunction, closeFunction);
        }
        else {
            var entryId = jQuery(this).parent().parent().attr('entryId');
            doMsg.showLoader();
            doMsg.notesModel.create(jQuery('#folderView_entry_' + entryId + '_subject').text(), jQuery('#folderView_entry_' + entryId + '_openBody').html().replace(/\u200B/g, ''), function () {
                doMsg.hideLoader();
                var layerId = 'domsg_messages_layerSuccessSaveAsNote';
                var closeFunction = function () {
                    jQuery('#' + layerId + '-container').remove();
                    jQuery('#' + layerId).remove();
                };
                doMsg.layerCreator.createSuccessLayer(layerId, doMsg.translations['messaging_successLayer_messageSavedAsNote_title'], doMsg.translations['messaging_successLayer_messageSavedAsNote_text'], closeFunction, closeFunction);
            });
        }
    };
    this.forwardClicked = function () {
        var entryId = jQuery(this).parent().parent().attr('entryId');
        doMsg.messageWriteViewController.clear();
        jQuery('#domsg_msgwrite_subject').val(jQuery('#folderView_entry_' + entryId + '_subject').text());
        jQuery('#domsg_msgwrite_body').val(jQuery('#folderView_entry_' + entryId + '_openBody').text());
        ;
        doMsg.messageWriteViewController.parentPage = 'folderViewInbox';
        doMsg.switchToMessageWriteView();
    };
    this.replyAllClicked = function () {
        var entryId = jQuery(this).parent().parent().attr('entryId');
        var entry = doMsg.messagesModel.inboxData[entryId];
        var viewController = doMsg.messageWriteViewController;
        viewController.clear();
        viewController.replyTo(entry);
        if (self.entryFilters.user(entry)) {
            viewController.recipientType = 'user';
            for (var i in entry.recipients) {
                var username = entry.recipients[i];
                if (username != doMsg.statusModel.myUsername) {
                    viewController.addRecipient(username);
                }
                viewController.updateRecipientsView();
            }
        }
        else if (self.entryFilters.clan(entry)) {
            viewController.recipientType = 'clan';
            viewController.addRecipient(entry.clanTag);
            viewController.updateRecipientsView();
        }
        viewController.parentPage = 'folderViewInbox';
        doMsg.switchToMessageWriteView();
    };
    this.replyClicked = function () {
        var entryId = jQuery(this).parent().parent().attr('entryId');
        var entry = doMsg.messagesModel.inboxData[entryId];
        var viewController = doMsg.messageWriteViewController;
        viewController.clear();
        viewController.replyTo(entry);
        if (self.entryFilters.user(entry) || self.entryFilters.clan(entry)) {
            viewController.recipientType = 'user';
            viewController.addRecipient(entry.sender);
            viewController.updateRecipientsView();
        }
        viewController.parentPage = 'folderViewInbox';
        doMsg.switchToMessageWriteView();
    };
    this.blacklistClicked = function () {
        if (self.currentFolder != 'inbox') {
            return;
        }
        var entryId = jQuery(this).parent().attr('entryId');
        var username = doMsg.messagesModel.inboxData[entryId]['sender'];
        var layerId = 'domsg_messages_layerConfirmAddToBlacklist';
        var closeFunction = function () {
            jQuery('#' + layerId + '-container').remove();
            jQuery('#' + layerId).remove();
        };
        doMsg.layerCreator.createConfirmLayer(layerId, doMsg.translations['messaging_confirmLayer_addToBlacklist_title'], doMsg.translations['messaging_confirmLayer_addToBlacklist_text'].replace(/%username%/g, username), closeFunction, function () {
            doMsg.showLoader();
            doMsg.blacklistModel.create(username, function () {
                doMsg.hideLoader();
                closeFunction();
            });
        }, closeFunction);
    };
    this.createEntryDiv = function (entry, className, isInbox) {
        var entryId = entry.entryId;
        var isSystemMail = (self.entryFilters.system(entry) || self.entryFilters.auction(entry) || self.entryFilters.info(entry));
        var div = jQuery('<div />').addClass('entry entryClosed').addClass(className).attr({
            id: 'folderView_entry_' + entryId,
            entryId: entryId
        });
        div.toggleClass('entryUnread', self.entryFilters.unread(entry));
        div.toggleClass('entrySystem', self.entryFilters.system(entry));
        div.toggleClass('entryClan', self.entryFilters.clan(entry));
        div.toggleClass('entryAuction', self.entryFilters.auction(entry));
        div.toggleClass('entryInfo', self.entryFilters.info(entry));
        if (isSystemMail) {
            div.addClass('systemMessage');
        }
        var divCheckbox = jQuery('<div />').addClass('checkbox').appendTo(div).attr({id: 'folderView_entry_' + entryId + '_checkbox'});
        divCheckbox.bind({
            click: doMsg.helperObject.checkboxClick,
            mouseover: doMsg.helperObject.checkboxMouseover,
            mouseout: doMsg.helperObject.checkboxMouseout
        });
        jQuery('<div />').addClass('avatar').appendTo(div).append('<img class="userInfoName" style="cursor:pointer" src="' + entry.senderAvatar + '" width="30" '
            + 'height="30" showUser="' + entry.senderID_base62 + '" title="' + entry.title + '" />');
        var divSender = jQuery('<div />').addClass('sender userInfoName').appendTo(div);
        if (self.entryFilters.system(entry)) {
            divSender.text(doMsg.translations['messaging_common_sysMessageSender']);
        }
        else if (self.entryFilters.auction(entry)) {
            divSender.text(doMsg.translations['messaging_common_auctionSender']);
        }
        else if (self.entryFilters.info(entry)) {
            divSender.text(doMsg.translations['messaging_common_sysMessageSender']);
        }
        else if (entry.sender) {
            divSender.text(entry.sender);
        }
        divSender.attr({showUser: entry.senderID_base62, title: entry.title});
        divSender.css({cursor: 'pointer', zIndex: 2});
        jQuery('<div />').addClass('date').text(entry.formatedDate || '').appendTo(div);
        jQuery('<div />').addClass('subject').text(entry.subject || '').appendTo(div).attr({id: 'folderView_entry_' + entryId + '_subject'});
        if (self.entryFilters.clan(entry)) {
            jQuery('<div />').addClass('open-recipients').appendTo(div).append('<div class="label">' + doMsg.translations['messaging_folderView_recipients'] + '</div>', '<ul><li>' + doMsg.translations['messaging_common_clan'] + entry.clanTag + '</li></ul>');
        }
        else if (!isSystemMail) {
            var divRecipients = jQuery('<div />').addClass('open-recipients').appendTo(div).append('<div class="label">' + doMsg.translations['messaging_folderView_recipients'] + '</div>');
            var ulRecipients = jQuery('<ul />').appendTo(divRecipients);
            for (var j in entry.recipients) {
                ulRecipients.append('<li>' + entry.recipients[j] + '</li>');
            }
        }
        jQuery('<div />').addClass('closed-body').html(entry.body.slice(0, 60)).appendTo(div);
        var divOpenBody = jQuery('<div />').addClass('open-body').html(entry.body).appendTo(div).attr({id: 'folderView_entry_' + entryId + '_openBody'});
        if (entry.parent) {
            jQuery('<div />').addClass('parent').appendTo(divOpenBody).append(jQuery('<div />').addClass('parent-separator'), jQuery('<div />').addClass('parent-sender').text(doMsg.translations['messaging_folderView_userWrote'].replace(/%username%/g, entry.parent.sender)), jQuery('<div />').addClass('parent-text').html(entry.parent.body));
        }
        jQuery('<div />').addClass('closed-clickarea').appendTo(div).bind({
            click: self.openClicked,
            mouseover: function () {
                jQuery(this).parent().addClass('entryRollover');
            },
            mouseout: function () {
                jQuery(this).parent().removeClass('entryRollover');
            }
        });
        jQuery('<div />').addClass('open-linesep').appendTo(div);
        if (isSystemMail) {
            jQuery('<div />').addClass('image-stamp').appendTo(div).append(jQuery('<img />').attr('src', '/do_img/global/logo_rework_darkorbit_175x65.png'));
        }
        var divClosedStatus = jQuery('<div />').addClass('closed-status icon-status').appendTo(div).attr({id: 'folderView_entry_' + entryId + '_closedStatus'});
        if (self.entryFilters.answered(entry)) {
            divClosedStatus.addClass('icon-status-answered').qtip({
                content: doMsg.translations['messaging_tooltip_mailStatusAnswered'],
                style: 'domsg'
            });
        }
        else if (self.entryFilters.read(entry)) {
            divClosedStatus.addClass('icon-status-read').qtip({
                content: doMsg.translations['messaging_tooltip_mailStatusRead'],
                style: 'domsg'
            });
        }
        else {
            divClosedStatus.qtip({content: doMsg.translations['messaging_tooltip_mailStatusUnread'], style: 'domsg'});
        }
        if (isInbox && !isSystemMail) {
            var divBlacklist = jQuery('<div />').addClass('open-blacklist icon-spam').appendTo(div);
            divBlacklist.bind({
                click: self.blacklistClicked,
                mouseover: doMsg.helperObject.iconSpamMouseover,
                mouseout: doMsg.helperObject.iconSpamMouseout
            });
            divBlacklist.qtip({content: doMsg.translations['messaging_tooltip_addToBlacklist'], style: 'domsg'});
        }
        var divClosedDelete = jQuery('<div />').addClass('closed-delete icon-trash').appendTo(div);
        divClosedDelete.bind({
            click: self.deleteClicked,
            mouseover: doMsg.helperObject.iconTrashMouseover,
            mouseout: doMsg.helperObject.iconTrashMouseout
        });
        divClosedDelete.qtip({content: doMsg.translations['messaging_tooltip_messageDelete'], style: 'domsg'});
        var divOpenDelete = jQuery('<div />').addClass('open-delete icon-trash').appendTo(div);
        divOpenDelete.bind({
            click: self.deleteClicked,
            mouseover: doMsg.helperObject.iconTrashMouseover,
            mouseout: doMsg.helperObject.iconTrashMouseout
        });
        divOpenDelete.qtip({content: doMsg.translations['messaging_tooltip_messageDelete'], style: 'domsg'});
        if (isInbox && !isSystemMail) {
            var divPopup = jQuery('<div />').addClass('action-popup hidden').appendTo(div).attr({id: 'folderView_entry_' + entryId + '_answerPopup'});
            jQuery('<div />').addClass('actionEntry').appendTo(divPopup).click(self.saveAsNoteClicked).append('<div class="icon icon-reply icon-reply-note"></div>', '<div class="label">' + doMsg.translations['messaging_common_saveAsNote'] + '</div>');
            jQuery('<div />').addClass('actionEntry').appendTo(divPopup).click(self.replyAllClicked).append('<div class="icon icon-reply icon-reply-all"></div>', '<div class="label">' + doMsg.translations['messaging_common_replyAll'] + '</div>');
            jQuery('<div />').addClass('actionEntry').appendTo(divPopup).click(self.forwardClicked).append('<div class="icon icon-reply icon-reply-forward"></div>', '<div class="label">' + doMsg.translations['messaging_common_forward'] + '</div>');
            divPopup.children().hover(doMsg.helperObject.actionEntryMouseover, doMsg.helperObject.actionEntryMouseout);
            var divAnswerBtn = jQuery('<div />').addClass('button-answer open-reply').appendTo(div);
            var divAnswerLabel = jQuery('<div />').addClass('label').appendTo(divAnswerBtn).text(doMsg.translations['messaging_common_reply'] || '');
            var divAnswerTriangle = jQuery('<div />').addClass('triangle').appendTo(divAnswerBtn)
            divAnswerLabel.bind({
                click: self.replyClicked,
                mouseover: doMsg.helperObject.buttonAnswerLabelMouseover,
                mouseout: doMsg.helperObject.buttonAnswerLabelMouseout
            });
            divAnswerTriangle.bind({
                click: self.answerTriangleClicked,
                mouseover: doMsg.helperObject.buttonAnswerTriangleMouseover,
                mouseout: doMsg.helperObject.buttonAnswerTriangleMouseout
            });
        }
        jQuery('<div />').addClass('button-close open-closebtn').appendTo(div).bind({
            click: self.closeClicked,
            mouseover: doMsg.helperObject.buttonCloseMouseover,
            mouseout: doMsg.helperObject.buttonCloseMouseout
        });
        if (isSystemMail) {
            var divSocialBox = jQuery('<div />').addClass('socialBox').appendTo(div);
            jQuery('<div />').addClass('followUs').appendTo(divSocialBox).text(doMsg.translations['messaging_follow_us'] || '');
            jQuery('<a />').appendTo(divSocialBox).append(jQuery('<div />').addClass('socialIcon facebook')).attr({
                href: 'http://www.facebook.com/darkorbit',
                target: '_blank'
            });
            jQuery('<a />').appendTo(divSocialBox).append(jQuery('<div />').addClass('socialIcon twitter')).attr({
                href: 'http://twitter.com/darkorbit',
                target: '_blank'
            });
            jQuery('<a />').appendTo(divSocialBox).append(jQuery('<div />').addClass('socialIcon youtube')).attr({
                href: 'http://www.youtube.com/user/darkorbithq',
                target: '_blank'
            });
            jQuery('<div />').addClass('close-linesep').appendTo(div);
            jQuery('<div />').addClass('fraud-protection').appendTo(div).html(doMsg.translations['messaging_informationtag_frauprotection']);
        }
        return div;
    };
    this.updateInboxView = function () {
        if (self.currentFolder != 'inbox' || !doMsg.messagesModel.initialInboxLoaded) {
            return;
        }
        var offset = (self.currentPage - 1) * 15;
        var limit = 15;
        var container = jQuery('#folderViewEntrys').empty();
        for (var i in doMsg.messagesModel.inboxEntrys) {
            var entryId = doMsg.messagesModel.inboxEntrys[i];
            var entry = doMsg.messagesModel.getInboxEntry(entryId);
            var filter = self.entryFilters[self.currentFilter];
            if (filter && !filter(entry)) {
                continue;
            }
            if (offset > 0) {
                offset--;
            }
            else if (limit == 0) {
                break;
            }
            else {
                container.append(self.createEntryDiv(entry, 'entryInbox', true));
                limit--;
            }
        }
    };
    this.updateOutboxView = function () {
        if (self.currentFolder != 'outbox' || !doMsg.messagesModel.initialOutboxLoaded) {
            return;
        }
        var offset = (self.currentPage - 1) * 15;
        var limit = 15;
        var container = jQuery('#folderViewEntrys').empty();
        for (var i in doMsg.messagesModel.outboxEntrys) {
            if (offset > 0) {
                offset--;
            }
            else if (limit == 0) {
                break;
            }
            else {
                var entryId = doMsg.messagesModel.outboxEntrys[i];
                var entry = doMsg.messagesModel.getOutboxEntry(entryId);
                container.append(self.createEntryDiv(entry, 'entryOutbox', false));
                limit--;
            }
        }
    };
}
function DoMsg_Controller_MessageWriteView() {
    var self = this;
    var doMsg = DoMessaging.getInstance();
    this.eventsBinded = false;
    this.userSearchTimeout;
    this.userSearchValid = false;
    this.parentType = false;
    this.parentMessageId = false;
    this.recipientType = 'user';
    this.recipients = new Array();
    this.parentPage = 'folderViewInbox';
    this.init = function () {
        self.bindEvents();
        self.resizePage();
    };
    this.bindEvents = function () {
        if (!self.eventsBinded) {
            jQuery('#domsg_msgwrite_userSearch').val(doMsg.translations['messaging_msgWrite_search']).bind({
                focus: self.userSearchFocus,
                blur: self.userSearchBlur,
                keydown: self.userSearchKeydown,
                keyup: self.userSearchChanged,
                change: self.userSearchChanged
            });
            jQuery('#domsg_msgwrite_userSearchAddBtn').bind({
                click: self.userSearchAddClicked,
                mouseover: doMsg.helperObject.iconAddMouseover,
                mouseout: doMsg.helperObject.iconAddMouseout
            });
            jQuery('#domsg_msgwrite_help').bind({
                click: self.helpClicked,
                mouseover: doMsg.helperObject.iconInfoMouseover,
                mouseout: doMsg.helperObject.iconInfoMouseout
            });
            jQuery('#domsg_msgwrite_cancelBtn').bind({
                click: self.cancelClicked,
                mouseover: doMsg.helperObject.buttonCancelMouseover,
                mouseout: doMsg.helperObject.buttonCancelMouseout
            });
            jQuery('#domsg_msgwrite_sendMessageBtn').bind({
                click: self.sendMessageClicked,
                mouseover: doMsg.helperObject.buttonBigGreenMouseover,
                mouseout: doMsg.helperObject.buttonBigGreenMouseout
            });
            jQuery('#domsg_msgwrite_body').TextAreaExpander(120, null, function () {
                doMsg.messageWriteViewController.resizePage();
            });
            jQuery('#domsg_msgwrite_helpLayerClose').bind({
                click: doMsg.messageWriteViewController.helpCloseClicked,
                mouseover: doMsg.helperObject.buttonCloseMouseover,
                mouseout: doMsg.helperObject.buttonCloseMouseout
            });
            jQuery('#sendReCaptcha').bind({
                click: self.sendReCaptcha,
                mouseover: doMsg.helperObject.buttonBigGreenMouseover,
                mouseout: doMsg.helperObject.buttonBigGreenMouseout
            });
            jQuery('#cancelReCaptcha').bind({
                click: self.cancelReCaptcha,
                mouseover: doMsg.helperObject.buttonCancelReCaptchaMouseover,
                mouseout: doMsg.helperObject.buttonCancelReCaptchaMouseout
            });
            self.eventsBinded = true;
        }
    };
    this.show = function () {
        jQuery('#messageWriteView').removeClass('hidden');
        self.resizePage();
    };
    this.hide = function () {
        jQuery('#messageWriteView').addClass('hidden');
    };
    this.resizePage = function () {
        var writeParent = jQuery('#domsg_msgwrite_parent');
        var writeBody = jQuery('#domsg_msgwrite_body');
        var writeContacts = jQuery('#messageWriteContacts');
        if (writeParent.hasClass('hidden')) {
            var textareaMinHeight = writeBody.css('min-height');
            if (parseInt(textareaMinHeight) < 360) {
                writeBody.css('min-height', 360);
            }
            var textareaHeight = writeBody.height();
            if (textareaHeight > 360) {
                jQuery('#messageWriteView').css('height', 140 + textareaHeight);
            }
        }
        else {
            var parentHeight = writeParent.height();
            var textareaMinHeight = 360 - parentHeight;
            if (textareaMinHeight < 180) {
                textareaMinHeight = 180;
            }
            writeBody.css('min-height', textareaMinHeight);
            var textareaHeight = writeBody.height();
            var totalHeight = textareaHeight + parentHeight;
            if (totalHeight > 360) {
                jQuery('#messageWriteView').css('height', 140 + totalHeight);
            }
        }
        writeContacts.css({minHeight: writeContacts.parent().height(), height: writeContacts.parent().height()});
    };
    this.replyTo = function (entry) {
        self.parentType = entry.type;
        self.parentMessageId = entry.messageId;
        jQuery('#domsg_msgwrite_parent').removeClass('hidden');
        jQuery('#domsg_msgwrite_subject').val(doMsg.translations['messaging_msgWrite_replyAcronym'] + ' ' + entry.subject);
        jQuery('#domsg_msgwrite_parentDateUser').text(entry.formatedDate + ' ' + entry.sender);
        jQuery('#domsg_msgwrite_parentText').html(entry.body);
        self.resizePage();
    };
    this.clear = function () {
        jQuery('#messageWriteContacts').css({minHeight: '', maxHeight: ''});
        self.parentMessageId = false;
        self.recipientType = 'user';
        self.recipients = [];
        self.updateRecipientsView();
        jQuery('#domsg_msgwrite_userSearch').removeClass('namecheck-negative namecheck-positive').val(doMsg.translations['messaging_msgWrite_search']);
        jQuery('#domsg_msgwrite_subject').removeClass('error').val('');
        jQuery('#domsg_msgwrite_body').removeClass('error').val('').css('height', '');
        jQuery('#domsg_msgwrite_parent').addClass('hidden');
        jQuery('#domsg_msgwrite_parentDateUser').text('');
        jQuery('#domsg_msgwrite_parentText').html('');
        jQuery('#messageWriteView').css('height', '');
        self.resizePage();
        jQuery('#domsg_msgwrite_userSearchAddBtn').addClass('icon-add-disabled');
        jQuery('#domsg_recipientList').removeClass('error');
    };
    this.contactClanClicked = function () {
        if (!doMsg.statusModel.clan) {
            return;
        }
        var controller = doMsg.messageWriteViewController;
        var createError = function (title, text) {
            var layerId = 'domsg_msgwrite_errorLayer';
            var closeFunction = function () {
                jQuery('#' + layerId + '-container').remove();
                jQuery('#' + layerId).remove();
            };
            doMsg.layerCreator.createErrorLayer(layerId, title, text, closeFunction, closeFunction);
        };
        if (controller.parentMessageId != 0) {
            createError(doMsg.translations['messaging_errorLayer_replyNoRecipientSwitch_title'], doMsg.translations['messaging_errorLayer_replyNoRecipientSwitch_text']);
        }
        else if (controller.recipients.length > 0) {
            if (controller.recipientType != 'clan') {
                createError(doMsg.translations['messaging_errorLayer_addOfClanWhileRecipients_title'], doMsg.translations['messaging_errorLayer_addOfClanWhileRecipients_text']);
            }
        }
        else {
            controller.recipientType = 'clan';
            controller.addRecipient(doMsg.statusModel.clan);
            controller.updateRecipientsView();
        }
    };
    this.contactUserClicked = function () {
        var controller = doMsg.messageWriteViewController;
        var createError = function (title, text) {
            var layerId = 'domsg_msgwrite_errorLayer';
            var closeFunction = function () {
                jQuery('#' + layerId + '-container').remove();
                jQuery('#' + layerId).remove();
            };
            doMsg.layerCreator.createErrorLayer(layerId, title, text, closeFunction, closeFunction);
        };
        if (controller.parentMessageId != 0) {
            createError(doMsg.translations['messaging_errorLayer_replyNoRecipientSwitch_title'], doMsg.translations['messaging_errorLayer_replyNoRecipientSwitch_text']);
        }
        else if (controller.recipients.length > 0 && controller.recipientType == 'clan') {
            createError(doMsg.translations['messaging_errorLayer_addOfClanWhileRecipients_title'], doMsg.translations['messaging_errorLayer_addOfClanWhileRecipients_text']);
        }
        else if (controller.recipients.length >= 5) {
            createError(doMsg.translations['messaging_errorLayer_tooManyRecipients_title'], doMsg.translations['messaging_errorLayer_tooManyRecipients_text']);
        }
        else {
            controller.recipientType = 'user';
            controller.addRecipient(jQuery(this).attr('username'));
            controller.updateRecipientsView();
        }
    };
    this.updateContactsView = function () {
        var contactsContainer = jQuery('#messageWriteContacts');
        var clanTag = doMsg.statusModel.clan;
        var userModel = doMsg.contactsModel;
        contactsContainer.empty();
        if (clanTag) {
            var div = jQuery('<div />').addClass('entry entryClan').appendTo(contactsContainer).click(self.contactClanClicked);
            jQuery('<div />').addClass('avatar').appendTo(div);
            jQuery('<div />').addClass('label').text(clanTag || '').appendTo(div);
            jQuery('<div />').addClass('info').appendTo(div).text(doMsg.translations['messaging_msgWrite_messageToClan'] || '');
        }
        for (var i in userModel.friends) {
            var userHash = userModel.friends[i];
            var userAvatar = userModel.avatars[userHash];
            var username = userModel.usernames[userHash];
            var div = jQuery('<div />').addClass('entry').attr('username', username).appendTo(contactsContainer);
            div.bind({
                click: self.contactUserClicked, mouseover: function () {
                    jQuery(this).addClass('entry-rollover');
                }, mouseout: function () {
                    jQuery(this).removeClass('entry-rollover');
                }
            });
            var divAvatar = jQuery('<div />').addClass('avatar').appendTo(div);
            if (userAvatar) {
                divAvatar.append('<img src="' + userAvatar + '" width="30" height="30" />');
            }
            jQuery('<div />').addClass('label').text(username || '').appendTo(div);
        }
    };
    this.addRecipient = function (username) {
        for (var i in self.recipients) {
            if (self.recipients[i] == username) {
                return;
            }
        }
        self.recipients.push(username);
    };
    this.removeRecipient = function (username) {
        var newRecipients = [];
        for (var i in self.recipients) {
            var myUsername = self.recipients[i];
            if (myUsername != username) {
                newRecipients.push(myUsername);
            }
        }
        self.recipients = newRecipients;
    };
    this.removeRecipientClicked = function () {
        var controller = doMsg.messageWriteViewController;
        controller.removeRecipient(jQuery(this).parent().attr('username'));
        controller.updateRecipientsView();
    };
    this.updateRecipientsView = function () {
        var container = jQuery('#domsg_recipientList').empty();
        for (var i in self.recipients) {
            var username = self.recipients[i];
            var div = jQuery('<div />').addClass('recipient').appendTo(container).attr('username', username);
            jQuery('<span />').text(username || '').appendTo(div);
            if (doMsg.messageWriteViewController.parentMessageId == 0) {
                var divRemove = jQuery('<div></div>').addClass('button-close remove hidden').appendTo(div).attr({id: 'domsg_recipientList_' + username + '_remove'});
                divRemove.click(this.removeRecipientClicked);
                div.bind({
                    mouseover: function () {
                        jQuery('#domsg_recipientList_' + username + '_remove').removeClass('hidden');
                    }, mouseout: function () {
                        jQuery('#domsg_recipientList_' + username + '_remove').addClass('hidden');
                    }
                });
            }
        }
    };
    this.userSearchAddClicked = function () {
        var controller = doMsg.messageWriteViewController;
        if (controller.userSearchValid) {
            var createError = function (title, text) {
                var layerId = 'domsg_msgwrite_errorLayer';
                var closeFunction = function () {
                    jQuery('#' + layerId + '-container').remove();
                    jQuery('#' + layerId).remove();
                };
                doMsg.layerCreator.createErrorLayer(layerId, title, text, closeFunction, closeFunction);
            };
            if (controller.parentMessageId != 0) {
                createError(doMsg.translations['messaging_errorLayer_replyNoRecipientSwitch_title'], doMsg.translations['messaging_errorLayer_replyNoRecipientSwitch_text']);
            }
            else if (controller.recipients.length > 0 && controller.recipientType == 'clan') {
                createError(doMsg.translations['messaging_errorLayer_addOfClanWhileRecipients_title'], doMsg.translations['messaging_errorLayer_addOfClanWhileRecipients_text']);
            }
            else if (controller.recipients.length >= 5) {
                createError(doMsg.translations['messaging_errorLayer_tooManyRecipients_title'], doMsg.translations['messaging_errorLayer_tooManyRecipients_text']);
            }
            else {
                controller.recipientType = 'user';
                controller.addRecipient(jQuery('#domsg_msgwrite_userSearch').val());
                controller.updateRecipientsView();
                controller.userSearchValid = false;
                jQuery('#domsg_msgwrite_userSearch').removeClass('namecheck-negative namecheck-positive').val(doMsg.translations['messaging_msgWrite_search']);
                jQuery('#domsg_msgwrite_userSearchAddBtn').addClass('icon-add-disabled');
            }
        }
    };
    this.userSearchFocus = function () {
        var elem = jQuery(this);
        if (elem.val() == doMsg.translations['messaging_msgWrite_search']) {
            elem.val('');
        }
    };
    this.userSearchBlur = function () {
        var elem = jQuery(this);
        if (!elem.val().length) {
            elem.val(doMsg.translations['messaging_msgWrite_search']);
        }
    };
    this.userSearchKeydown = function () {
        doMsg.messageWriteViewController.userSearchValid = false;
        jQuery('#domsg_msgwrite_userSearch').removeClass('namecheck-negative namecheck-positive');
        jQuery('#domsg_msgwrite_userSearchAddBtn').addClass('icon-add-disabled');
    };
    this.userSearchChanged = function () {
        var controller = doMsg.messageWriteViewController;
        window.clearTimeout(controller.userSearchTimeout);
        controller.userSearchTimeout = window.setTimeout(controller.userSearchChangedTick, 500);
    };
    this.userSearchChangedTick = function () {
        var username = jQuery('#domsg_msgwrite_userSearch').val();
        if (username != '' && username != doMsg.translations['messaging_msgWrite_search']) {
            doMsg.usersModel.checkUsername(username, doMsg.messageWriteViewController.userSearchChangedChecked);
        }
    };
    this.userSearchChangedChecked = function (username, valid) {
        if (jQuery('#domsg_msgwrite_userSearch').val() == username) {
            doMsg.messageWriteViewController.userSearchValid = !!valid;
            if (valid) {
                jQuery('#domsg_msgwrite_userSearch').addClass('namecheck-positive');
                jQuery('#domsg_msgwrite_userSearchAddBtn').removeClass('icon-add-disabled');
            }
            else {
                jQuery('#domsg_msgwrite_userSearch').addClass('namecheck-negative');
            }
        }
    };
    this.helpClicked = function () {
        jQuery('#domsg_msgwrite_helpLayer').removeClass('hidden');
    };
    this.helpCloseClicked = function () {
        jQuery('#domsg_msgwrite_helpLayer').addClass('hidden');
    };
    this.cancelClicked = function () {
        doMsg.messageWriteViewController.clear();
        switch (doMsg.messageWriteViewController.parentPage) {
            case'folderViewOutbox':
                doMsg.switchToFolderViewOutbox();
                break;
            case'notesView':
                doMsg.switchToNotesView();
                break;
                ;
            case'contactsView':
                doMsg.switchToContactsView();
                break;
            case'folderViewInbox':
            default:
                doMsg.switchToFolderViewInbox();
        }
    };
    this.sendMessageSuccess = function () {
        doMsg.hideLoader();
        var layerId = 'domsg_msgwrite_layerSendSuccess';
        var closeFunction = function () {
            doMsg.messageWriteViewController.cancelClicked();
            jQuery('#' + layerId + '-container').remove();
            jQuery('#' + layerId).remove();
        };
        doMsg.layerCreator.createSuccessLayer(layerId, doMsg.translations['messaging_successLayer_messageSent_title'], doMsg.translations['messaging_successLayer_messageSent_text'], closeFunction, closeFunction);
    };
    this.sendMessageBlacklisted = function () {
        doMsg.hideLoader();
        var layerId = 'domsg_msgwrite_layerErrorBlacklisted';
        var closeFunction = function () {
            jQuery('#' + layerId + '-container').remove();
            jQuery('#' + layerId).remove();
        };
        doMsg.layerCreator.createErrorLayer(layerId, doMsg.translations['messaging_errorLayer_blacklisted_title'], doMsg.translations['messaging_errorLayer_blacklisted_text'], closeFunction, closeFunction);
    };
    this.sendMessageBlockedmessages = function () {
        doMsg.hideLoader();
        var layerId = 'domsg_msgwrite_errorLayer';
        var closeFunction = function () {
            jQuery('#' + layerId + '-container').remove();
            jQuery('#' + layerId).remove();
        };
        doMsg.layerCreator.createErrorLayer(layerId, doMsg.translations['messaging_errorLayer_blocked_title'], doMsg.translations['messaging_errorLayer_blocked_text'], closeFunction, closeFunction);
    };
    this.sendMessageSpammessages = function () {
        doMsg.hideLoader();
        var layerId = 'domsg_msgwrite_errorLayer';
        var closeFunction = function () {
            jQuery('#' + layerId + '-container').remove();
            jQuery('#' + layerId).remove();
        };
        doMsg.layerCreator.createErrorLayer(layerId, doMsg.translations['messaging_errorLayer_spam_title'], doMsg.translations['messaging_errorLayer_spam_text'], closeFunction, closeFunction);
    };
    this.cancelReCaptcha = function () {
        var layerId = 'domsg_msgwrite_errorLayer';
        jQuery('#' + layerId + '-container').remove();
        jQuery('#' + layerId).remove();
        jQuery('#reCaptcha').hide();
    };
    this.sendReCaptcha = function () {
        jQuery('#reCaptcha').hide();
        doMsg.showLoader();
        jQuery.ajax({
            type: 'POST',
            url: '/ajax/messaging.php',
            dataType: 'json',
            data: {
                command: "checkReCaptcha",
                recaptcha_challenge_field: jQuery('#recaptcha_challenge_field').val(),
                recaptcha_response_field: jQuery('#recaptcha_response_field').val()
            },
            success: function (response) {
                if (response.result == 'OK') {
                    var layerId = 'domsg_msgwrite_errorLayer';
                    jQuery('#' + layerId + '-container').remove();
                    jQuery('#' + layerId).remove();
                    sendMail();
                }
                else {
                    var layerId = 'domsg_msgwrite_errorLayer';
                    var closeFunction = function () {
                        jQuery('#' + layerId + '-container').remove();
                        jQuery('#' + layerId).remove();
                        jQuery('#reCaptcha').show();
                    };
                    jQuery('#reCaptcha').hide();
                    Recaptcha.reload();
                    jQuery('#domsg_msgwrite_body').addClass('error');
                    jQuery('#recaptcha_response_field').val('');
                    doMsg.layerCreator.createErrorLayer(layerId, doMsg.translations['messaging_errorLayer_wrongCaptcha_title'], doMsg.translations['messaging_errorLayer_wrongCaptcha_text'], closeFunction, closeFunction);
                    doMsg.hideLoader();
                }
            }
        });
    };
    this.sendMessageClicked = function () {
        var subjectElem = jQuery('#domsg_msgwrite_subject');
        var subject = subjectElem.val();
        var bodyElem = jQuery('#domsg_msgwrite_body');
        var body = bodyElem.val();
        var error = false;
        var createError = function (title, text) {
            var layerId = 'domsg_msgwrite_errorLayer';
            var closeFunction = function () {
                jQuery('#' + layerId + '-container').remove();
                jQuery('#' + layerId).remove();
            };
            doMsg.hideLoader();
            doMsg.layerCreator.createErrorLayer(layerId, title, text, closeFunction, closeFunction);
        };
        doMsg.showLoader();
        error = (doMsg.messageWriteViewController.recipients.length < 1);
        jQuery('#domsg_recipientList').toggleClass('error', error);
        if (error) {
            createError(doMsg.translations['messaging_errorLayer_noRecipient_title'], doMsg.translations['messaging_errorLayer_noRecipient_text']);
            return;
        }
        error = (subject.length < 3);
        subjectElem.toggleClass('error', error);
        if (error) {
            createError(doMsg.translations['messaging_errorLayer_subjectTooShort_title'], doMsg.translations['messaging_errorLayer_subjectTooShort_text']);
            return;
        }
        error = (subject.length > 50);
        subjectElem.toggleClass('error', error);
        if (error) {
            createError(doMsg.translations['messaging_errorLayer_subjectTooLong_title'], doMsg.translations['messaging_errorLayer_subjectTooLong_text']);
            return;
        }
        error = (body.length < 5);
        bodyElem.toggleClass('error', error);
        if (error) {
            createError(doMsg.translations['messaging_errorLayer_bodyTooShort_title'], doMsg.translations['messaging_errorLayer_bodyTooShort_text']);
            return;
        }
        error = (body.length > 5000);
        bodyElem.toggleClass('error', error);
        if (error) {
            createError(doMsg.translations['messaging_errorLayer_bodyTooLong_title'], doMsg.translations['messaging_errorLayer_bodyTooLong_text']);
            return;
        }
        checkLevelLimit();
    };
}
function sendMail() {
    var doMsg = DoMessaging.getInstance();
    var controller = doMsg.messageWriteViewController;
    doMsg.messagesModel.send(controller.parentType, controller.parentMessageId, controller.recipientType, controller.recipients, jQuery('#domsg_msgwrite_subject').val(), jQuery('#domsg_msgwrite_body').val(), controller.sendMessageSuccess, controller.sendMessageBlacklisted, controller.sendMessageBlockedmessages, controller.sendMessageSpammessages);
}
function checkLevelLimit() {
    var doMsg = DoMessaging.getInstance();
    jQuery.ajax({
        type: 'POST',
        url: '/ajax/messaging.php',
        dataType: 'json',
        data: {
            command: "checkLevelLimit",
            recipientType: doMsg.messageWriteViewController.recipientType,
            recipients: doMsg.messageWriteViewController.recipients
        },
        success: function (response) {
            if (response.result == 'ERROR') {
                if (response.levelLimitReached) {
                    var layerId = 'domsg_msgwrite_errorLayer';
                    var closeFunction = function () {
                        jQuery('#' + layerId + '-container').remove();
                        jQuery('#' + layerId).remove();
                    };
                    jQuery('#domsg_msgwrite_body').addClass('error');
                    doMsg.layerCreator.createErrorLayer(layerId, doMsg.translations['messaging_errorLayer_restrictionUnknownUser_title'], response.message, closeFunction, closeFunction);
                    doMsg.hideLoader();
                }
            }
            else {
                showReCaptcha();
            }
        }
    });
}
function showReCaptcha() {
    var doMsg = DoMessaging.getInstance();
    jQuery.ajax({
        type: 'POST',
        url: '/ajax/messaging.php',
        dataType: 'json',
        data: {
            command: "showReCaptcha",
            recipientType: doMsg.messageWriteViewController.recipientType,
            recipients: doMsg.messageWriteViewController.recipients
        },
        success: function (response) {
            if (response.result == 'SHOW') {
                Recaptcha.reload();
                jQuery('#domessaging').append(jQuery('<div />').addClass('layerContainer').attr('id', 'domsg_msgwrite_errorLayer-container'));
                jQuery('#reCaptcha').show();
                doMsg.hideLoader();
            }
            else if (response.result == 'ERROR') {
                if (response.toManyRecipients) {
                    var layerId = 'domsg_msgwrite_errorLayer';
                    var closeFunction = function () {
                        jQuery('#' + layerId + '-container').remove();
                        jQuery('#' + layerId).remove();
                    };
                    jQuery('#reCaptcha').hide();
                    jQuery('#domsg_msgwrite_body').addClass('error');
                    jQuery('#recaptcha_response_field').val('');
                    doMsg.layerCreator.createErrorLayer(layerId, doMsg.translations['messaging_errorLayer_tooManyRecipients_title'], doMsg.translations['messaging_errorLayer_tooManyRecipients_text'], closeFunction, closeFunction);
                    doMsg.hideLoader();
                }
            }
            else {
                jQuery('#reCaptcha').hide();
                sendMail();
            }
        }
    });
}
function DoMsg_Controller_ContactsView() {
    var self = this;
    var doMsg = DoMessaging.getInstance();
    this.eventsBinded = false;
    this.maxPage = 0;
    this.currentPage = 0;
    this.init = function () {
        self.bindEvents();
        self.blockAllInvitationButtonInitialCheck();
    };
    this.bindEvents = function () {
        if (!self.eventsBinded) {
            jQuery('#domsg_contacts_blockAllInvitations').qtip({
                content: doMsg.translations['messaging_tooltip_blockAllNotifications'],
                style: 'domsg'
            });
            jQuery('#domsg_contacts_blackListButton').bind({
                click: self.blackListButtonClicked,
                mouseover: doMsg.helperObject.buttonBlacklistMouseover,
                mouseout: doMsg.helperObject.buttonBlacklistMouseout
            });
            jQuery('#domsg_contacts_blockAllInvitations').click(self.switchBlockAllInvitations);
            self.eventsBinded = true;
        }
    };
    this.show = function () {
        jQuery('#contactsView').removeClass('hidden');
    };
    this.hide = function () {
        jQuery('#contactsView').addClass('hidden');
    };
    this.blackListButtonClicked = function () {
        var blacklist = jQuery('#blackListEntrys');
        blacklist.toggleClass('hidden');
        jQuery(this).toggleClass('button-blacklist-clicked', !blacklist.hasClass('hidden'));
    };
    this.switchBlockAllInvitations = function () {
        var elem = jQuery(this);
        if (elem.hasClass('button-singleCheckbox-checked')) {
            elem.removeClass('button-singleCheckbox-checked');
            doMsg.showLoader();
            doMsg.contactsModel.unblockAllInvitations(function () {
                var layerId = 'domsg_contacts_layerUnblockAllInvitesSuccess';
                var closeFunction = function () {
                    jQuery('#' + layerId + '-container').remove();
                    jQuery('#' + layerId).remove();
                };
                doMsg.hideLoader();
                doMsg.layerCreator.createSuccessLayer(layerId, doMsg.translations['messaging_successLayer_unblockAllInvites_title'], doMsg.translations['messaging_successLayer_unblockAllInvites_text'], closeFunction, closeFunction);
            });
        }
        else {
            var layerId = 'domsg_contacts_layerBlockAllInvitesConfirm';
            var closeFunction = function () {
                jQuery('#' + layerId + '-container').remove();
                jQuery('#' + layerId).remove();
            };
            doMsg.layerCreator.createConfirmLayer(layerId, doMsg.translations['messaging_confirmLayer_blockAllInvites_title'], doMsg.translations['messaging_confirmLayer_blockAllInvites_text'], closeFunction, function () {
                doMsg.showLoader();
                closeFunction();
                doMsg.contactsModel.blockAllInvitations(function () {
                    var layerIdBlockSuccess = 'domsg_contacts_layerBlockAllInvitesSuccess';
                    var subCloseFunction = function () {
                        jQuery('#' + layerIdBlockSuccess + '-container').remove();
                        jQuery('#' + layerIdBlockSuccess).remove();
                        console.log('close: ' + layerIdBlockSuccess);
                    };
                    jQuery('#domsg_contacts_blockAllInvitations').addClass('button-singleCheckbox-checked');
                    doMsg.hideLoader();
                    doMsg.layerCreator.createSuccessLayer(layerIdBlockSuccess, doMsg.translations['messaging_confirmLayer_blockAllInvites_title'], doMsg.translations['messaging_successLayer_blockAllInvites_text'], subCloseFunction, subCloseFunction)
                });
            }, closeFunction);
        }
    };
    this.blockAllInvitationButtonInitialCheck = function (userHash) {
        jQuery.ajax({
            type: 'POST',
            url: '/ajax/messaging.php',
            dataType: 'json',
            data: {command: "blockAllInvitationsInitialCheck", userHash: userHash},
            success: function (response) {
                if (response.result != 'OK') {
                    doMsg.systemError();
                }
                else if (response.status == true) {
                    jQuery('#domsg_contacts_blockAllInvitations').addClass('button-singleCheckbox-checked');
                }
            },
            error: doMsg.systemError
        });
    };
    this.blackListDeleteClicked = function () {
        var username = jQuery(this).parent().attr('username');
        var layerId = 'domsg_contacts_layerConfirmBlackListDelete';
        var closeFunction = function () {
            jQuery('#' + layerId + '-container').remove();
            jQuery('#' + layerId).remove();
        };
        doMsg.layerCreator.createConfirmLayer(layerId, doMsg.translations['messaging_confirmLayer_blackListDelete_title'], doMsg.translations['messaging_confirmLayer_blackListDelete_text'].replace(/%username%/g, username), closeFunction, function () {
            doMsg.showLoader();
            doMsg.blacklistModel.deleteEntry(username, function () {
                doMsg.hideLoader();
                closeFunction();
            });
        }, closeFunction);
    };
    this.updateBlackListView = function () {
        var blacklist = jQuery('#blackListEntrys').empty();
        for (var i in doMsg.blacklistModel.entrys) {
            var username = doMsg.blacklistModel.entrys[i];
            var div = jQuery('<div />').addClass('entry').attr('username', username).appendTo(blacklist)
            div.bind({
                mouseover: function () {
                    jQuery(this).addClass('entry-rollover');
                }, mouseout: function () {
                    jQuery(this).removeClass('entry-rollover');
                }
            });
            jQuery('<div />').addClass('label').text(username || '').appendTo(div);
            jQuery('<div />').addClass('delete icon-trash').appendTo(div).bind({
                click: self.blackListDeleteClicked,
                mouseover: function () {
                    blacklist.qtip({
                        content: doMsg.translations['messaging_confirmLayer_blackListDelete_title'],
                        style: 'domsg'
                    }), doMsg.helperObject.iconTrashMouseover
                },
                mouseout: doMsg.helperObject.iconTrashMouseout
            });
        }
    };
    this.sendMsgClicked = function () {
        var controller = doMsg.messageWriteViewController;
        var userHash = jQuery(this).parent().attr('entryId');
        controller.clear();
        controller.addRecipient(doMsg.contactsModel.usernames[userHash]);
        controller.updateRecipientsView();
        controller.parentPage = 'contactsView';
        doMsg.switchToMessageWriteView();
    };
    this.cancelInvitation = function () {
        var userHash = jQuery(this).parent().attr('entryId');
        var layerId = 'domsg_contacts_layerConfirmCancelInvitation';
        var closeFunction = function () {
            jQuery('#' + layerId + '-container').remove();
            jQuery('#' + layerId).remove();
        };
        doMsg.layerCreator.createConfirmLayer(layerId, doMsg.translations['messaging_confirmLayer_contactCancelInvitation_title'], doMsg.translations['messaging_confirmLayer_contactCancelInvitation_text'], closeFunction, function () {
            closeFunction();
            doMsg.showLoader();
            doMsg.contactsModel.cancelInvitation(userHash, function () {
                doMsg.hideLoader();
            });
        }, closeFunction);
        window.scrollTo(0, 100);
    };
    this.deleteDeclinedInvitation = function () {
        var userHash = jQuery(this).parent().attr('entryId');
        doMsg.showLoader();
        doMsg.contactsModel.cancelInvitation(userHash, function () {
            var layerId = 'domsg_contacts_layerSuccessDeleteDeclinedInvitation';
            var closeFunction = function () {
                jQuery('#' + layerId + '-container').remove();
                jQuery('#' + layerId).remove();
            };
            doMsg.hideLoader();
            doMsg.layerCreator.createSuccessLayer(layerId, doMsg.translations['messaging_successLayer_deleteDeclinedInvitation_title'], doMsg.translations['messaging_successLayer_deleteDeclinedInvitation_text'], closeFunction, closeFunction);
        });
    };
    this.confirmClicked = function () {
        var userHash = jQuery(this).parent().attr('entryId');
        doMsg.showLoader();
        doMsg.contactsModel.confirmRequest(userHash, function () {
            var layerId = 'domsg_contacts_layerSuccessRequestAccepted';
            var closeFunction = function () {
                jQuery('#' + layerId + '-container').remove();
                jQuery('#' + layerId).remove();
            };
            doMsg.hideLoader();
            doMsg.layerCreator.createSuccessLayer(layerId, doMsg.translations['messaging_successLayer_contactRequestAccepted_title'], doMsg.translations['messaging_successLayer_contactRequestAccepted_text'], closeFunction, closeFunction);
        });
    };
    this.declineClicked = function () {
        var userHash = jQuery(this).parent().attr('entryId');
        var layerId = 'domsg_contacts_layerConfirmRequestDecline';
        var closeFunction = function () {
            jQuery('#' + layerId + '-container').remove();
            jQuery('#' + layerId).remove();
        };
        doMsg.layerCreator.createConfirmLayer(layerId, doMsg.translations['messaging_confirmLayer_contactRequestDecline_title'], doMsg.translations['messaging_confirmLayer_contactRequestDecline_text'], closeFunction, function () {
            doMsg.showLoader();
            doMsg.contactsModel.declineRequest(userHash, function () {
                doMsg.hideLoader();
                closeFunction();
            });
        }, closeFunction);
    };
    this.cancelClicked = function () {
        var userHash = jQuery(this).parent().attr('entryId');
        var layerId = 'domsg_contacts_layerConfirmContactDelete';
        var closeFunction = function () {
            jQuery('#' + layerId + '-container').remove();
            jQuery('#' + layerId).remove();
        };
        doMsg.layerCreator.createConfirmLayer(layerId, doMsg.translations['messaging_confirmLayer_contactDelete_title'], doMsg.translations['messaging_confirmLayer_contactDelete_text'], closeFunction, function () {
            doMsg.showLoader();
            doMsg.contactsModel.cancelFriendship(userHash, function () {
                doMsg.hideLoader();
                closeFunction();
            });
        }, closeFunction);
        window.scrollTo(0, 100);
    };
    this.updateView = function () {
        var container = jQuery('#contactsViewEntrys').empty();
        var row_b = false;
        var model = doMsg.contactsModel;
        for (var i in model.requests) {
            var userHash = model.requests[i];
            var div = jQuery('<div />').addClass('contact').appendTo(container).attr({
                id: 'contactsView_contact_' + userHash,
                entryId: userHash
            });
            div.toggleClass('contact-row-b', row_b);
            row_b = !row_b;
            var divAvatar = jQuery('<div />').addClass('avatar').appendTo(div);
            if (model.avatars[userHash]) {
                divAvatar.append('<img src="' + model.avatars[userHash] + '" width="45" height="45" />');
            }
            var divUsername = jQuery('<div />').addClass('username').text(model.usernames[userHash] || '').appendTo(div);
            var divInfoText = jQuery('<div />').addClass('status').appendTo(div);
            switch (model.status[userHash]) {
                case'pending':
                    divUsername.addClass('username-pending');
                    divInfoText.text(doMsg.translations['messaging_label_yourInviteIsPending'] || '');
                    jQuery('<div />').addClass('button-red decline').appendTo(div).text(doMsg.translations['messaging_label_cancelYourInvite'] || '').bind({
                        click: self.cancelInvitation,
                        mouseover: doMsg.helperObject.buttonRedMouseover,
                        mouseout: doMsg.helperObject.buttonRedMouseout
                    });
                    break;
                case'declined':
                    divUsername.addClass('username-declined');
                    divInfoText.text(doMsg.translations['messaging_label_yourInviteWasDeclined'] || '');
                    jQuery('<div />').addClass('button-red decline').appendTo(div).text(doMsg.translations['messaging_label_deleteYourInvite'] || '').bind({
                        click: self.deleteDeclinedInvitation,
                        mouseover: doMsg.helperObject.buttonGreenMouseover,
                        mouseout: doMsg.helperObject.buttonGreenMouseout
                    });
                    break;
                default:
                    divUsername.addClass('username-invite');
                    divInfoText.text(doMsg.translations['messaging_contacts_sendAnInvite'] || '');
                    jQuery('<div />').addClass('button-green confirm').appendTo(div).text(doMsg.translations['messaging_contacts_confirm'] || '').bind({
                        click: self.confirmClicked,
                        mouseover: doMsg.helperObject.buttonGreenMouseover,
                        mouseout: doMsg.helperObject.buttonGreenMouseout
                    });
                    jQuery('<div />').addClass('button-red decline').appendTo(div).text(doMsg.translations['messaging_contacts_decline'] || '').bind({
                        click: self.declineClicked,
                        mouseover: doMsg.helperObject.buttonRedMouseover,
                        mouseout: doMsg.helperObject.buttonRedMouseout
                    });
            }
        }
        for (var i in model.friends) {
            var userHash = model.friends[i];
            var div = jQuery('<div />').addClass('contact').appendTo(container).attr({
                id: 'contactsView_contact_' + userHash,
                entryId: userHash
            });
            div.toggleClass('contact-row-b', row_b);
            row_b = !row_b;
            var divAvatar = jQuery('<div />').addClass('avatar').appendTo(div)
            if (model.avatars[userHash]) {
                divAvatar.append('<img class="userInfoName" style="cursor:pointer" src="' + model.avatars[userHash]
                    + '" width="45" height="45" showUser="' + userHash + '" title="' + model.titles[userHash] + '" />');
            }
            var divUsername = jQuery('<div />').addClass('username userInfoName').appendTo(div).text(model.usernames[userHash] || '').css('cursor', 'pointer').attr({
                showUser: userHash,
                title: model.titles[userHash]
            });
            var divDelete = jQuery('<div />').addClass('delete icon-trash').appendTo(div);
            divDelete.bind({
                click: self.cancelClicked,
                mouseover: doMsg.helperObject.iconTrashMouseover,
                mouseout: doMsg.helperObject.iconTrashMouseout
            });
            divDelete.qtip({content: doMsg.translations['messaging_tooltip_friendCancel'], style: 'domsg'});
            var divMail = jQuery('<div />').addClass('sendMsg icon-mail').appendTo(div);
            divMail.bind({
                click: self.sendMsgClicked,
                mouseover: doMsg.helperObject.iconMailMouseover,
                mouseout: doMsg.helperObject.iconMailMouseout
            });
            divMail.qtip({content: doMsg.translations['messaging_tooltip_sendMessage'], style: 'domsg'});
        }
    };
}
function DoMsg_Controller_NotesView() {
    var self = this;
    var doMsg = DoMessaging.getInstance();
    this.eventsBinded = false;
    this.newNoteActive = false;
    this.init = function () {
        self.bindEvents();
    };
    this.bindEvents = function () {
        if (!self.eventsBinded) {
            jQuery('#domsg_notes_new').bind({
                click: self.newNoteClicked,
                mouseover: doMsg.helperObject.buttonBigGreenMouseover,
                mouseout: doMsg.helperObject.buttonBigGreenMouseout
            });
            self.eventsBinded = true;
        }
    };
    this.show = function () {
        jQuery('#notesView').removeClass('hidden');
    };
    this.hide = function () {
        jQuery('#notesView').addClass('hidden');
    };
    this.open = function (noteId) {
        var entryDiv = jQuery('#notesView_entry_' + noteId);
        var entry = doMsg.notesModel.data[noteId];
        jQuery('#notesView_entry_' + noteId + '_open-subject').val(entry.subject);
        jQuery('#notesView_entry_' + noteId + '_open-body').val(entry.body).change();
        entryDiv.removeClass('entryClosed').addClass('entryOpen');
    };
    this.close = function (noteId) {
        var entryDiv = jQuery('#notesView_entry_' + noteId);
        entryDiv.css('height', '');
        entryDiv.removeClass('entryOpen').addClass('entryClosed');
    };
    this.closeAll = function () {
        jQuery('#notesViewEntrys').children('.entry').each(function (index, elm) {
            doMsg.notesViewController.close(jQuery(elm).attr('noteId'));
        });
    };
    this.newForm = function () {
        var div = jQuery('<div />').addClass('entry entryOpen entryNew').prependTo('#notesViewEntrys').attr({id: 'notesView_entry_new'});
        jQuery('<div />').addClass('open-subject').appendTo(div).append(jQuery('<input type="text" />').attr({
            id: 'notesView_entry_new_open-subject',
            maxlength: '50'
        }));
        var divOpenBody = jQuery('<div />').addClass('open-body').appendTo(div);
        var textareaOpenBody = jQuery('<textarea />').appendTo(divOpenBody).attr({
            id: 'notesView_entry_new_open-body',
            maxlength: '5000'
        });
        textareaOpenBody.TextAreaExpander(77, null, function () {
            var elem = jQuery(this);
            var textareaHeight = elem.height();
            var parent = elem.parent().parent();
            if (textareaHeight > 77 && parent.hasClass('entryOpen')) {
                parent.css('height', 143 + textareaHeight - 77);
            }
        });
        jQuery('<div />').addClass('domsg_notes_txtCounter').appendTo(div).attr({id: 'notesView_entry_new_open-body_counter'});
        var divSave = jQuery('<div />').addClass('save button-green').appendTo(div);
        divSave.text(doMsg.translations['messaging_common_save']);
        divSave.bind({
            click: self.createClicked,
            mouseover: doMsg.helperObject.buttonGreenMouseover,
            mouseout: doMsg.helperObject.buttonGreenMouseout
        });
        jQuery('<div />').addClass('button-close open-closebtn').appendTo(div).bind({
            click: self.cancelNewNoteClicked,
            mouseover: doMsg.helperObject.buttonCloseMouseover,
            mouseout: doMsg.helperObject.buttonCloseMouseout
        });
    };
    this.updateView = function () {
        var notes = jQuery('#notesViewEntrys').empty();
        for (i in doMsg.notesModel.entrys) {
            var noteId = doMsg.notesModel.entrys[i];
            var entry = doMsg.notesModel.data[noteId];
            var div = jQuery('<div />').addClass('entry entryClosed').appendTo(notes).attr({
                id: 'notesView_entry_' + noteId,
                noteId: noteId
            });
            var divClosedSubject = jQuery('<div />').addClass('closed-subject').appendTo(div).attr({id: 'notesView_entry_' + noteId + '_closed-subject'});
            if (entry.nonPremiumBlock) {
                divClosedSubject.text(doMsg.translations['messaging_notes_premiumBlocked']);
            }
            else {
                divClosedSubject.text(entry.subject);
                var divClosedBody = jQuery('<div />').addClass('closed-body').appendTo(div);
                divClosedBody.attr('id', 'notesView_entry_' + noteId + '_closed-body');
                divClosedBody.text(entry.body.slice(0, 60));
                jQuery('<div />').addClass('open-subject').appendTo(div).append(jQuery('<input type="text" />').attr({
                    id: 'notesView_entry_' + noteId + '_open-subject',
                    maxlength: '50'
                }));
                var divOpenBody = jQuery('<div />').addClass('open-body').appendTo(div);
                var textareaOpenBody = jQuery('<textarea />').appendTo(divOpenBody).attr({
                    id: 'notesView_entry_' + noteId + '_open-body',
                    maxlength: '5000'
                });
                textareaOpenBody.TextAreaExpander(77, null, function () {
                    var elem = jQuery(this);
                    var textareaHeight = elem.height();
                    var parent = elem.parent().parent();
                    if (textareaHeight > 77 && parent.hasClass('entryOpen')) {
                        parent.css('height', 143 + textareaHeight - 77);
                    }
                });
                jQuery('<div />').addClass('closed-clickarea').appendTo(div).bind({
                    click: self.openClicked,
                    mouseover: function () {
                        jQuery(this).parent().addClass('entryRollover');
                    },
                    mouseout: function () {
                        jQuery(this).parent().removeClass('entryRollover');
                    }
                });
                var divSave = jQuery('<div />').addClass('save button-green').appendTo(div);
                divSave.text(doMsg.translations['messaging_common_save']);
                divSave.bind({
                    click: self.saveClicked,
                    mouseover: doMsg.helperObject.buttonGreenMouseover,
                    mouseout: doMsg.helperObject.buttonGreenMouseout
                });
                var divForward = jQuery('<div />').addClass('forward icon-mail').appendTo(div);
                divForward.bind({
                    click: self.forwardClicked,
                    mouseover: doMsg.helperObject.iconMailMouseover,
                    mouseout: doMsg.helperObject.iconMailMouseout
                });
                divForward.qtip({content: doMsg.translations['messaging_tooltip_noteForward'], style: 'domsg'});
                var divDelete = jQuery('<div />').addClass('delete icon-trash').appendTo(div);
                divDelete.bind({
                    click: self.deleteClicked,
                    mouseover: doMsg.helperObject.iconTrashMouseover,
                    mouseout: doMsg.helperObject.iconTrashMouseout
                });
                divDelete.qtip({content: doMsg.translations['messaging_tooltip_noteDelete'], style: 'domsg'});
                jQuery('<div />').addClass('button-close open-closebtn').appendTo(div).bind({
                    click: self.closeClicked,
                    mouseover: doMsg.helperObject.buttonCloseMouseover,
                    mouseout: doMsg.helperObject.buttonCloseMouseout
                });
            }
            jQuery('<div />').addClass('date').appendTo(div).text(entry.formatedDate);
            jQuery('<div />').addClass('domsg_notes_txtCounter').appendTo(div).attr({id: 'notesView_entry_' + noteId + '_open-body_counter'});
        }
    };
    this.saveSuccess = function (noteId) {
        var layerId = 'domsg_notes_layerSuccessSave';
        var closeFunction = function () {
            jQuery('#' + layerId + '-container').remove();
            jQuery('#' + layerId).remove();
        };
        doMsg.hideLoader();
        doMsg.layerCreator.createSuccessLayer(layerId, doMsg.translations['messaging_successLayer_noteSaved_title'], doMsg.translations['messaging_successLayer_noteSaved_text'], closeFunction, closeFunction);
    };
    this.validateForm = function (subjectElem, bodyElem) {
        var subject = subjectElem.val();
        var body = bodyElem.val();
        var error = false;
        var createError = function (title, text) {
            var layerId = 'domsg_notes_saveError';
            var closeFunction = function () {
                jQuery('#' + layerId + '-container').remove();
                jQuery('#' + layerId).remove();
            };
            doMsg.hideLoader();
            doMsg.layerCreator.createErrorLayer(layerId, title, text, closeFunction, closeFunction);
        };
        doMsg.showLoader();
        error = (subject.length < 3);
        subjectElem.toggleClass('error', error);
        if (error) {
            createError(doMsg.translations['messaging_errorLayer_subjectTooShort_title'], doMsg.translations['messaging_errorLayer_subjectTooShort_text']);
            return false;
        }
        error = (subject.length > 50);
        subjectElem.toggleClass('error', error);
        if (error) {
            createError(doMsg.translations['messaging_errorLayer_subjectTooLong_title'], doMsg.translations['messaging_errorLayer_subjectTooLong_text']);
            return false;
        }
        error = (body.length < 5);
        bodyElem.toggleClass('error', error);
        if (error) {
            createError(doMsg.translations['messaging_errorLayer_bodyTooShort_title'], doMsg.translations['messaging_errorLayer_bodyTooShort_text']);
            return false;
        }
        error = (body.length > 5000);
        bodyElem.toggleClass('error', error);
        if (error) {
            createError(doMsg.translations['messaging_errorLayer_bodyTooLong_title'], doMsg.translations['messaging_errorLayer_bodyTooLong_text']);
            return false;
        }
        return true;
    };
    this.saveClicked = function () {
        doMsg.showLoader();
        var noteId = jQuery(this).parent().attr('noteId');
        var subjectElem = jQuery('#notesView_entry_' + noteId + '_open-subject');
        var bodyElem = jQuery('#notesView_entry_' + noteId + '_open-body');
        if (self.validateForm(subjectElem, bodyElem)) {
            doMsg.notesModel.set(noteId, subjectElem.val(), bodyElem.val(), doMsg.notesViewController.saveSuccess);
        }
    };
    this.forwardClicked = function () {
        var noteId = jQuery(this).parent().attr('noteId');
        var entry = doMsg.notesModel.data[noteId];
        doMsg.messageWriteViewController.clear();
        doMsg.messageWriteViewController.parentPage = 'notesView';
        doMsg.switchToMessageWriteView();
        jQuery('#domsg_msgwrite_subject').val(entry.subject);
        jQuery('#domsg_msgwrite_body').val(entry.body);
    };
    this.deleteClicked = function () {
        var noteId = jQuery(this).parent().attr('noteId');
        var layerId = 'domsg_notes_layerConfirmDelete';
        var closeFunction = function () {
            jQuery('#' + layerId + '-container').remove();
            jQuery('#' + layerId).remove();
        };
        doMsg.layerCreator.createConfirmLayer(layerId, doMsg.translations['messaging_confirmLayer_noteDelete_title'], doMsg.translations['messaging_confirmLayer_noteDelete_text'], closeFunction, function () {
            doMsg.showLoader();
            doMsg.notesModel.deleteEntry(noteId, function () {
                doMsg.hideLoader();
                closeFunction();
            });
        }, closeFunction);
    };
    this.closeClicked = function () {
        doMsg.notesViewController.close(jQuery(this).parent().attr('noteId'));
    };
    this.openClicked = function () {
        var controller = doMsg.notesViewController;
        if (!controller.newNoteActive) {
            controller.closeAll();
            controller.open(jQuery(this).parent().attr('noteId'));
        }
    };
    this.newNoteClicked = function () {
        var controller = doMsg.notesViewController;
        if (!controller.newNoteActive) {
            var notesLimit = doMsg.statusModel.notesLimit;
            if (doMsg.statusModel.notesCount >= notesLimit) {
                var layerId = 'domsg_notes_limitReached';
                var closeFunction = function () {
                    jQuery('#' + layerId + '-container').remove();
                    jQuery('#' + layerId).remove();
                };
                doMsg.layerCreator.createErrorLayer(layerId, doMsg.translations['messaging_errorLayer_notesLimitReached_title'], doMsg.translations['messaging_errorLayer_notesLimitReached_text'].replace(/%notesLimit%/g, notesLimit), closeFunction, closeFunction);
                return;
            }
            controller.closeAll();
            controller.newForm();
            controller.newNoteActive = true;
            jQuery('#domsg_notes_new').addClass('button-biggreen-disabled');
        }
    };
    this.cancelNewNoteClicked = function () {
        jQuery('#notesView_entry_new').remove();
        jQuery('#domsg_notes_new').removeClass('button-biggreen-disabled');
        doMsg.notesViewController.newNoteActive = false;
    };
    this.createSuccess = function (noteId) {
        jQuery('#notesView_entry_new').remove();
        jQuery('#domsg_notes_new').removeClass('button-biggreen-disabled');
        doMsg.hideLoader();
        doMsg.notesViewController.newNoteActive = false;
    };
    this.createClicked = function () {
        var controller = doMsg.notesViewController;
        if (controller.newNoteActive) {
            var subjectElem = jQuery('#notesView_entry_new_open-subject');
            var bodyElem = jQuery('#notesView_entry_new_open-body');
            if (self.validateForm(subjectElem, bodyElem)) {
                doMsg.notesModel.create(subjectElem.val(), bodyElem.val(), controller.createSuccess);
            }
        }
    };
}
var DoMessaging = (function () {
    var instance = null;
    return new function () {
        this.getInstance = function () {
            if (instance == null) {
                instance = new DoMsg_Real();
            }
            return instance;
        }
    }
})();
function DoMsg_Helper() {
    var self = this;
    this.init = function () {
    };
    this.numberSort = function (a, b) {
        return a - b;
    };
    this.subNavTabMouseOver = function () {
        jQuery(this).addClass('tab-rollover');
    };
    this.subNavTabMouseOut = function () {
        jQuery(this).removeClass('tab-rollover');
    };
    this.subNavTabInboxInfo = function (unread, total) {
        jQuery('#domsg_tab_inbox_info').text(' (' + unread + '/' + total + ')');
    };
    this.iconTrashMouseover = function () {
        jQuery(this).addClass('icon-trash-rollover');
    };
    this.iconTrashMouseout = function () {
        jQuery(this).removeClass('icon-trash-rollover');
    };
    this.iconMailMouseover = function () {
        jQuery(this).addClass('icon-mail-rollover');
    };
    this.iconMailMouseout = function () {
        jQuery(this).removeClass('icon-mail-rollover');
    };
    this.iconSpamMouseover = function () {
        jQuery(this).addClass('icon-spam-rollover');
    };
    this.iconSpamMouseout = function () {
        jQuery(this).removeClass('icon-spam-rollover');
    };
    this.iconInfoMouseover = function () {
        jQuery(this).addClass('icon-info-rollover');
    };
    this.iconInfoMouseout = function () {
        jQuery(this).removeClass('icon-info-rollover');
    };
    this.iconAddMouseover = function () {
        jQuery(this).addClass('icon-add-rollover');
    };
    this.iconAddMouseout = function () {
        jQuery(this).removeClass('icon-add-rollover');
    };
    this.buttonCloseMouseover = function () {
        jQuery(this).addClass('button-close-rollover');
    };
    this.buttonCloseMouseout = function () {
        jQuery(this).removeClass('button-close-rollover');
    };
    this.buttonRedMouseover = function () {
        jQuery(this).addClass('button-red-rollover');
    };
    this.buttonRedMouseout = function () {
        jQuery(this).removeClass('button-red-rollover');
    };
    this.buttonGreenMouseover = function () {
        jQuery(this).addClass('button-green-rollover');
    };
    this.buttonGreenMouseout = function () {
        jQuery(this).removeClass('button-green-rollover');
    };
    this.buttonBigGreenMouseover = function () {
        jQuery(this).addClass('button-biggreen-rollover');
    };
    this.buttonBigGreenMouseout = function () {
        jQuery(this).removeClass('button-biggreen-rollover');
    };
    this.buttonCancelReCaptchaMouseover = function () {
        jQuery(this).addClass('button-cancelReCaptcha-rollover');
    };
    this.buttonCancelReCaptchaMouseout = function () {
        jQuery(this).removeClass('button-cancelReCaptcha-rollover');
    };
    this.buttonCancelMouseover = function () {
        jQuery(this).addClass('button-cancel-rollover');
    };
    this.buttonCancelMouseout = function () {
        jQuery(this).removeClass('button-cancel-rollover');
    };
    this.buttonAnswerLabelMouseover = function () {
        jQuery(this).parent().addClass('button-answer-rollover');
    };
    this.buttonAnswerLabelMouseout = function () {
        jQuery(this).parent().removeClass('button-answer-rollover');
    };
    this.buttonAnswerTriangleMouseover = function () {
        jQuery(this).addClass('triangle-rollover');
    };
    this.buttonAnswerTriangleMouseout = function () {
        jQuery(this).removeClass('triangle-rollover');
    };
    this.buttonBlacklistMouseover = function () {
        jQuery(this).addClass('button-blacklist-rollover');
    };
    this.buttonBlacklistMouseout = function () {
        jQuery(this).removeClass('button-blacklist-rollover');
    };
    this.buttonCheckboxClick = function () {
        jQuery(this).toggleClass('button-checkbox-checked');
    };
    this.buttonCheckboxMouseover = function () {
        var elem = jQuery(this);
        elem.addClass(elem.hasClass('button-checkbox-checked') ? 'button-checkbox-checked-rollover' : 'button-checkbox-rollover');
    };
    this.buttonCheckboxMouseout = function () {
        jQuery(this).removeClass('button-checkbox-checked-rollover');
        jQuery(this).removeClass('button-checkbox-rollover');
    };
    this.buttonLeftMouseover = function () {
        jQuery(this).addClass('button-left-rollover');
    };
    this.buttonLeftMouseout = function () {
        jQuery(this).removeClass('button-left-rollover');
    };
    this.buttonRightMouseover = function () {
        jQuery(this).addClass('button-right-rollover');
    };
    this.buttonRightMouseout = function () {
        jQuery(this).removeClass('button-right-rollover');
    };
    this.checkboxClick = function () {
        jQuery(this).toggleClass('checkbox-checked');
    }
    this.checkboxMouseover = function () {
        var elem = jQuery(this);
        elem.addClass(elem.hasClass('checkbox-checked') ? 'checkbox-checked-rollover' : 'checkbox-rollover');
    };
    this.checkboxMouseout = function () {
        jQuery(this).removeClass('checkbox-checked-rollover');
        jQuery(this).removeClass('checkbox-rollover');
    };
    this.actionEntryMouseover = function () {
        jQuery(this).addClass('actionEntry-rollover');
    };
    this.actionEntryMouseout = function () {
        jQuery(this).removeClass('actionEntry-rollover');
    };
}
function DoMsg_Real() {
    var self = this;
    this.eventsBinded = false;
    this.translations;
    this.helperObject;
    this.statusModel;
    this.messagesModel;
    this.contactsModel;
    this.notesModel;
    this.blacklistModel;
    this.folderViewController;
    this.messageWriteViewController;
    this.contactsViewController;
    this.notesViewController;
    this.intervalTimer;
    this.currentView;
    this.init = function () {
        self.helperObject = new DoMsg_Helper();
        self.helperObject.init();
        self.layerCreator = new DoMsg_LayerCreator();
        self.showLoader();
        self.usersModel = new DoMsg_Model_Users();
        self.usersModel.init();
        self.statusModel = new DoMsg_Model_Status();
        self.statusModel.init();
        self.messagesModel = new DoMsg_Model_Messages();
        self.messagesModel.init();
        self.blacklistModel = new DoMsg_Model_Blacklist();
        self.blacklistModel.init();
        self.contactsModel = new DoMsg_Model_Contacts();
        self.contactsModel.init();
        self.notesModel = new DoMsg_Model_Notes();
        self.notesModel.init();
        self.folderViewController = new DoMsg_Controller_FolderView();
        self.folderViewController.init();
        self.messageWriteViewController = new DoMsg_Controller_MessageWriteView();
        self.messageWriteViewController.init();
        self.contactsViewController = new DoMsg_Controller_ContactsView();
        self.contactsViewController.init();
        self.notesViewController = new DoMsg_Controller_NotesView();
        self.notesViewController.init();
        self.bindEvents();
        self.timerInit();
        self.switchToFolderViewInbox();
        self.loadInitialData();
    };
    this.loadInitialData = function () {
        jQuery.ajax({
            type: 'POST',
            url: '/ajax/messaging.php',
            dataType: 'json',
            data: {command: "init"},
            success: function (response) {
                if (response.result == "OK") {
                    self.initialDataLoaded(response);
                }
                else {
                    self.systemError();
                }
            },
            error: self.systemError
        });
    };
    this.initialDataLoaded = function (response) {
        self.statusModel.parseInitData(response.push);
        self.messagesModel.parseInboxInitData(response.inboxGet);
        self.messagesModel.parseOutboxInitData(response.outboxGet);
        self.contactsModel.parseInitData(response.contactsGet);
        self.notesModel.parseInitData(response.notesGet);
        self.blacklistModel.parseInitData(response.blacklistGet);
        self.hideLoader();
    };
    this.systemError = function () {
        var layerId = 'domsg_systemError';
        var closeFunction = function () {
            location.reload(true);
        };
        self.hideLoader();
        self.layerCreator.createErrorLayer(layerId, self.translations['messaging_errorLayer_system_title'], self.translations['messaging_errorLayer_system_text'], closeFunction, closeFunction);
    };
    this.showLoader = function () {
        jQuery('#loader').removeClass('hidden');
    };
    this.hideLoader = function () {
        jQuery('#loader').addClass('hidden');
    };
    this.bindEvents = function () {
        if (!self.eventsBinded) {
            jQuery('#domsg_tab_inbox').bind({
                click: self.switchToFolderViewInbox,
                mouseover: self.helperObject.subNavTabMouseOver,
                mouseout: self.helperObject.subNavTabMouseOut
            });
            jQuery('#domsg_tab_outbox').bind({
                click: self.switchToFolderViewOutbox,
                mouseover: self.helperObject.subNavTabMouseOver,
                mouseout: self.helperObject.subNavTabMouseOut
            });
            jQuery('#domsg_tab_contacts').bind({
                click: self.switchToContactsView,
                mouseover: self.helperObject.subNavTabMouseOver,
                mouseout: self.helperObject.subNavTabMouseOut
            });
            jQuery('#domsg_tab_notes').bind({
                click: self.switchToNotesView,
                mouseover: self.helperObject.subNavTabMouseOver,
                mouseout: self.helperObject.subNavTabMouseOut
            });
            self.eventsBinded = true;
        }
    };
    this.timerInit = function () {
        self.intervalTimer = window.setInterval(self.timerTick, 30000);
    };
    this.timerTick = function () {
        DoMessaging.getInstance().statusModel.timer();
    };
    this.statusModelUpdated = function (inboxUnreadDiff, inboxTotalDiff, outboxTotalDiff) {
        self.helperObject.subNavTabInboxInfo(self.statusModel.inboxUnread, self.statusModel.inboxTotal);
        self.folderViewController.statsUpdated(inboxTotalDiff, outboxTotalDiff);
    };
    this.blacklistModelUpdated = function () {
        self.contactsViewController.updateBlackListView();
    };
    this.messagesModelInboxUpdated = function () {
        self.folderViewController.updateInboxView();
        self.hideLoader();
    };
    this.messagesModelOutboxUpdated = function () {
        self.folderViewController.updateOutboxView();
    };
    this.notesModelUpdated = function () {
        self.notesViewController.updateView();
    };
    this.contactsModelUpdated = function () {
        self.contactsViewController.updateView();
        self.messageWriteViewController.updateContactsView();
    };
    this.switchView = function (newView) {
        if (newView != self.currentView) {
            var views = {
                folderView: self.folderViewController,
                messageWriteView: self.messageWriteViewController,
                contactsView: self.contactsViewController,
                notesView: self.notesViewController
            };
            if (views[newView]) {
                jQuery.each(views, function (key, view) {
                    view.hide();
                });
                views[newView].show();
                self.currentView = newView;
            }
        }
    };
    this.switchToFolderViewInbox = function () {
        self.folderViewController.switchFolder('inbox');
        self.switchView('folderView');
    };
    this.switchToFolderViewOutbox = function () {
        self.folderViewController.switchFolder('outbox');
        self.switchView('folderView');
    };
    this.switchToMessageWriteView = function () {
        self.switchView('messageWriteView');
        jQuery('#messageWriteContacts').jScrollPane({showArrows: true});
    };
    this.switchToContactsView = function () {
        self.switchView('contactsView');
    };
    this.switchToNotesView = function () {
        self.switchView('notesView');
    };
    this.setTranslations = function (jsTranslations) {
        self.translations = jsTranslations;
    };
}
function DoMsg_LayerCreator() {
    var self = this;
    var doMsg = DoMessaging.getInstance();
    this.createButton = function (className, captionKey, callback) {
        var divButton = jQuery('<div />').addClass('button').addClass(className);
        divButton.text(doMsg.translations[captionKey]);
        divButton.bind({
            click: callback, mouseover: function () {
                jQuery(this).addClass(className + '-rollover');
            }, mouseout: function () {
                jQuery(this).removeClass(className + '-rollover');
            }
        });
        return divButton;
    };
    this.createBaseLayer = function (id, className, headline, text, closeCallback) {
        var divBg = jQuery('<div />').attr('id', id + '-container').addClass('layerContainer');
        var div = jQuery('<div />').attr('id', id).addClass('baseLayer').addClass(className);
        var divHeader = jQuery('<div />').addClass('header').appendTo(div).text(headline);
        var divClose = jQuery('<div />').addClass('close').appendTo(divHeader);
        divClose.bind({
            click: closeCallback, mouseover: function () {
                jQuery(this).addClass('close-rollover');
            }, mouseout: function () {
                jQuery(this).removeClass('close-rollover');
            }
        });
        var divContent = jQuery('<div />').addClass('content').appendTo(div);
        jQuery('<div />').addClass('icon').appendTo(divContent);
        jQuery('<div />').addClass('text').text(text || '').appendTo(divContent);
        var divFooter = jQuery('<div />').addClass('footer').appendTo(div);
        jQuery('#domessaging').append(divBg, div);
        return div;
    };
    this.createErrorLayer = function (id, headline, text, closeCallback, buttonOkCallback) {
        self.createBaseLayer(id, 'errorLayer', headline, text, closeCallback).find('.footer').append(self.createButton('button-ok', 'messaging_common_okayBtn', buttonOkCallback));
    };
    this.createSuccessLayer = function (id, headline, text, closeCallback, buttonOkCallback) {
        self.createBaseLayer(id, 'successLayer', headline, text, closeCallback).find('.footer').append(self.createButton('button-ok', 'messaging_common_okayBtn', buttonOkCallback));
    };
    this.createConfirmLayer = function (id, headline, text, closeCallback, buttonConfirmCallback, buttonAbortCallback) {
        self.createBaseLayer(id, 'confirmLayer', headline, text, closeCallback).find('.footer').append(self.createButton('button-confirm', 'messaging_common_confirmBtn', buttonConfirmCallback), self.createButton('button-abort', 'messaging_common_abortBtn', buttonAbortCallback));
    };
}
