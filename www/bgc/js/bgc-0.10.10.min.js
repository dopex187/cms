! function(a) {
    a.extend(a.fn, {
        validate: function(b) {
            if (!this.length) return b && b.debug && window.console && console.warn("nothing selected, can't validate, returning nothing"), void 0;
            var c = a.data(this[0], "validator");
            return c ? c : (this.attr("novalidate", "novalidate"), c = new a.validator(b, this[0]), a.data(this[0], "validator", c), c.settings.onsubmit && (this.validateDelegate(":submit", "click", function(b) {
                c.settings.submitHandler && (c.submitButton = b.target), a(b.target).hasClass("cancel") && (c.cancelSubmit = !0)
            }), this.submit(function(b) {
                function d() {
                    var d;
                    return c.settings.submitHandler ? (c.submitButton && (d = a("<input type='hidden'/>").attr("name", c.submitButton.name).val(c.submitButton.value).appendTo(c.currentForm)), c.settings.submitHandler.call(c, c.currentForm, b), c.submitButton && d.remove(), !1) : !0
                }
                return c.settings.debug && b.preventDefault(), c.cancelSubmit ? (c.cancelSubmit = !1, d()) : c.form() ? c.pendingRequest ? (c.formSubmitted = !0, !1) : d() : (c.focusInvalid(), !1)
            })), c)
        },
        valid: function() {
            if (a(this[0]).is("form")) return this.validate().form();
            var b = !0,
                c = a(this[0].form).validate();
            return this.each(function() {
                b &= c.element(this)
            }), b
        },
        removeAttrs: function(b) {
            var c = {},
                d = this;
            return a.each(b.split(/\s/), function(a, b) {
                c[b] = d.attr(b), d.removeAttr(b)
            }), c
        },
        rules: function(b, c) {
            var d = this[0];
            if (b) {
                var e = a.data(d.form, "validator").settings,
                    f = e.rules,
                    g = a.validator.staticRules(d);
                switch (b) {
                    case "add":
                        a.extend(g, a.validator.normalizeRule(c)), f[d.name] = g, c.messages && (e.messages[d.name] = a.extend(e.messages[d.name], c.messages));
                        break;
                    case "remove":
                        if (!c) return delete f[d.name], g;
                        var h = {};
                        return a.each(c.split(/\s/), function(a, b) {
                            h[b] = g[b], delete g[b]
                        }), h
                }
            }
            var i = a.validator.normalizeRules(a.extend({}, a.validator.metadataRules(d), a.validator.classRules(d), a.validator.attributeRules(d), a.validator.staticRules(d)), d);
            if (i.required) {
                var j = i.required;
                delete i.required, i = a.extend({
                    required: j
                }, i)
            }
            return i
        }
    }), a.extend(a.expr[":"], {
        blank: function(b) {
            return !a.trim("" + b.value)
        },
        filled: function(b) {
            return !!a.trim("" + b.value)
        },
        unchecked: function(a) {
            return !a.checked
        }
    }), a.validator = function(b, c) {
        this.settings = a.extend(!0, {}, a.validator.defaults, b), this.currentForm = c, this.init()
    }, a.validator.format = function(b, c) {
        return 1 === arguments.length ? function() {
            var c = a.makeArray(arguments);
            return c.unshift(b), a.validator.format.apply(this, c)
        } : (arguments.length > 2 && c.constructor !== Array && (c = a.makeArray(arguments).slice(1)), c.constructor !== Array && (c = [c]), a.each(c, function(a, c) {
            b = b.replace(new RegExp("\\{" + a + "\\}", "g"), c)
        }), b)
    }, a.extend(a.validator, {
        defaults: {
            messages: {},
            groups: {},
            rules: {},
            errorClass: "error",
            validClass: "valid",
            errorElement: "label",
            focusInvalid: !0,
            errorContainer: a([]),
            errorLabelContainer: a([]),
            onsubmit: !0,
            ignore: ":hidden",
            ignoreTitle: !1,
            onfocusin: function(a) {
                this.lastActive = a, this.settings.focusCleanup && !this.blockFocusCleanup && (this.settings.unhighlight && this.settings.unhighlight.call(this, a, this.settings.errorClass, this.settings.validClass), this.addWrapper(this.errorsFor(a)).hide())
            },
            onfocusout: function(a) {
                !this.checkable(a) && (a.name in this.submitted || !this.optional(a)) && this.element(a)
            },
            onkeyup: function(a, b) {
                (9 !== b.which || "" !== this.elementValue(a)) && (a.name in this.submitted || a === this.lastActive) && this.element(a)
            },
            onclick: function(a) {
                a.name in this.submitted ? this.element(a) : a.parentNode.name in this.submitted && this.element(a.parentNode)
            },
            highlight: function(b, c, d) {
                "radio" === b.type ? this.findByName(b.name).addClass(c).removeClass(d) : a(b).addClass(c).removeClass(d)
            },
            unhighlight: function(b, c, d) {
                "radio" === b.type ? this.findByName(b.name).removeClass(c).addClass(d) : a(b).removeClass(c).addClass(d)
            }
        },
        setDefaults: function(b) {
            a.extend(a.validator.defaults, b)
        },
        messages: {
            required: "This field is required.",
            remote: "Please fix this field.",
            email: "Please enter a valid email address.",
            url: "Please enter a valid URL.",
            date: "Please enter a valid date.",
            dateISO: "Please enter a valid date (ISO).",
            number: "Please enter a valid number.",
            digits: "Please enter only digits.",
            creditcard: "Please enter a valid credit card number.",
            equalTo: "Please enter the same value again.",
            maxlength: a.validator.format("Please enter no more than {0} characters."),
            minlength: a.validator.format("Please enter at least {0} characters."),
            rangelength: a.validator.format("Please enter a value between {0} and {1} characters long."),
            range: a.validator.format("Please enter a value between {0} and {1}."),
            max: a.validator.format("Please enter a value less than or equal to {0}."),
            min: a.validator.format("Please enter a value greater than or equal to {0}.")
        },
        autoCreateRanges: !1,
        prototype: {
            init: function() {
                function b(b) {
                    var c = a.data(this[0].form, "validator"),
                        d = "on" + b.type.replace(/^validate/, "");
                    c.settings[d] && c.settings[d].call(c, this[0], b)
                }
                this.labelContainer = a(this.settings.errorLabelContainer), this.errorContext = this.labelContainer.length && this.labelContainer || a(this.currentForm), this.containers = a(this.settings.errorContainer).add(this.settings.errorLabelContainer), this.submitted = {}, this.valueCache = {}, this.pendingRequest = 0, this.pending = {}, this.invalid = {}, this.reset();
                var c = this.groups = {};
                a.each(this.settings.groups, function(b, d) {
                    a.each(d.split(/\s/), function(a, d) {
                        c[d] = b
                    })
                });
                var d = this.settings.rules;
                a.each(d, function(b, c) {
                    d[b] = a.validator.normalizeRule(c)
                }), a(this.currentForm).validateDelegate(":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'] ,[type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'] ", "focusin focusout keyup", b).validateDelegate("[type='radio'], [type='checkbox'], select, option", "click", b), this.settings.invalidHandler && a(this.currentForm).bind("invalid-form.validate", this.settings.invalidHandler)
            },
            form: function() {
                return this.checkForm(), a.extend(this.submitted, this.errorMap), this.invalid = a.extend({}, this.errorMap), this.valid() || a(this.currentForm).triggerHandler("invalid-form", [this]), this.showErrors(), this.valid()
            },
            checkForm: function() {
                this.prepareForm();
                for (var a = 0, b = this.currentElements = this.elements(); b[a]; a++) this.check(b[a]);
                return this.valid()
            },
            element: function(b) {
                b = this.validationTargetFor(this.clean(b)), this.lastElement = b, this.prepareElement(b), this.currentElements = a(b);
                var c = this.check(b) !== !1;
                return c ? delete this.invalid[b.name] : this.invalid[b.name] = !0, this.numberOfInvalids() || (this.toHide = this.toHide.add(this.containers)), this.showErrors(), c
            },
            showErrors: function(b) {
                if (b) {
                    a.extend(this.errorMap, b), this.errorList = [];
                    for (var c in b) this.errorList.push({
                        message: b[c],
                        element: this.findByName(c)[0]
                    });
                    this.successList = a.grep(this.successList, function(a) {
                        return !(a.name in b)
                    })
                }
                this.settings.showErrors ? this.settings.showErrors.call(this, this.errorMap, this.errorList) : this.defaultShowErrors()
            },
            resetForm: function() {
                a.fn.resetForm && a(this.currentForm).resetForm(), this.submitted = {}, this.lastElement = null, this.prepareForm(), this.hideErrors(), this.elements().removeClass(this.settings.errorClass).removeData("previousValue")
            },
            numberOfInvalids: function() {
                return this.objectLength(this.invalid)
            },
            objectLength: function(a) {
                var b = 0;
                for (var c in a) b++;
                return b
            },
            hideErrors: function() {
                this.addWrapper(this.toHide).hide()
            },
            valid: function() {
                return 0 === this.size()
            },
            size: function() {
                return this.errorList.length
            },
            focusInvalid: function() {
                if (this.settings.focusInvalid) try {
                    a(this.findLastActive() || this.errorList.length && this.errorList[0].element || []).filter(":visible").focus().trigger("focusin")
                } catch (b) {}
            },
            findLastActive: function() {
                var b = this.lastActive;
                return b && 1 === a.grep(this.errorList, function(a) {
                    return a.element.name === b.name
                }).length && b
            },
            elements: function() {
                var b = this,
                    c = {};
                return a(this.currentForm).find("input, select, textarea").not(":submit, :reset, :image, [disabled]").not(this.settings.ignore).filter(function() {
                    return !this.name && b.settings.debug && window.console && console.error("%o has no name assigned", this), this.name in c || !b.objectLength(a(this).rules()) ? !1 : (c[this.name] = !0, !0)
                })
            },
            clean: function(b) {
                return a(b)[0]
            },
            errors: function() {
                var b = this.settings.errorClass.replace(" ", ".");
                return a(this.settings.errorElement + "." + b, this.errorContext)
            },
            reset: function() {
                this.successList = [], this.errorList = [], this.errorMap = {}, this.toShow = a([]), this.toHide = a([]), this.currentElements = a([])
            },
            prepareForm: function() {
                this.reset(), this.toHide = this.errors().add(this.containers)
            },
            prepareElement: function(a) {
                this.reset(), this.toHide = this.errorsFor(a)
            },
            elementValue: function(b) {
                var c = a(b).attr("type"),
                    d = a(b).val();
                return "radio" === c || "checkbox" === c ? a('input[name="' + a(b).attr("name") + '"]:checked').val() : "string" == typeof d ? d.replace(/\r/g, "") : d
            },
            check: function(b) {
                b = this.validationTargetFor(this.clean(b));
                var f, c = a(b).rules(),
                    d = !1,
                    e = this.elementValue(b);
                for (var g in c) {
                    var h = {
                        method: g,
                        parameters: c[g]
                    };
                    try {
                        if (f = a.validator.methods[g].call(this, e, b, h.parameters), "dependency-mismatch" === f) {
                            d = !0;
                            continue
                        }
                        if (d = !1, "pending" === f) return this.toHide = this.toHide.not(this.errorsFor(b)), void 0;
                        if (!f) return this.formatAndAdd(b, h), !1
                    } catch (i) {
                        throw this.settings.debug && window.console && console.log("exception occured when checking element " + b.id + ", check the '" + h.method + "' method", i), i
                    }
                }
                if (!d) return this.objectLength(c) && this.successList.push(b), !0
            },
            customMetaMessage: function(b, c) {
                if (a.metadata) {
                    var d = this.settings.meta ? a(b).metadata()[this.settings.meta] : a(b).metadata();
                    return d && d.messages && d.messages[c]
                }
            },
            customDataMessage: function(b, c) {
                return a(b).data("msg-" + c.toLowerCase()) || b.attributes && a(b).attr("data-msg-" + c.toLowerCase())
            },
            customMessage: function(a, b) {
                var c = this.settings.messages[a];
                return c && (c.constructor === String ? c : c[b])
            },
            findDefined: function() {
                for (var a = 0; a < arguments.length; a++)
                    if (void 0 !== arguments[a]) return arguments[a];
                return void 0
            },
            defaultMessage: function(b, c) {
                return this.findDefined(this.customMessage(b.name, c), this.customDataMessage(b, c), this.customMetaMessage(b, c), !this.settings.ignoreTitle && b.title || void 0, a.validator.messages[c], "<strong>Warning: No message defined for " + b.name + "</strong>")
            },
            formatAndAdd: function(b, c) {
                var d = this.defaultMessage(b, c.method),
                    e = /\$?\{(\d+)\}/g;
                "function" == typeof d ? d = d.call(this, c.parameters, b) : e.test(d) && (d = a.validator.format(d.replace(e, "{$1}"), c.parameters)), this.errorList.push({
                    message: d,
                    element: b
                }), this.errorMap[b.name] = d, this.submitted[b.name] = d
            },
            addWrapper: function(a) {
                return this.settings.wrapper && (a = a.add(a.parent(this.settings.wrapper))), a
            },
            defaultShowErrors: function() {
                var a, b;
                for (a = 0; this.errorList[a]; a++) {
                    var c = this.errorList[a];
                    this.settings.highlight && this.settings.highlight.call(this, c.element, this.settings.errorClass, this.settings.validClass), this.showLabel(c.element, c.message)
                }
                if (this.errorList.length && (this.toShow = this.toShow.add(this.containers)), this.settings.success)
                    for (a = 0; this.successList[a]; a++) this.showLabel(this.successList[a]);
                if (this.settings.unhighlight)
                    for (a = 0, b = this.validElements(); b[a]; a++) this.settings.unhighlight.call(this, b[a], this.settings.errorClass, this.settings.validClass);
                this.toHide = this.toHide.not(this.toShow), this.hideErrors(), this.addWrapper(this.toShow).show()
            },
            validElements: function() {
                return this.currentElements.not(this.invalidElements())
            },
            invalidElements: function() {
                return a(this.errorList).map(function() {
                    return this.element
                })
            },
            showLabel: function(b, c) {
                var d = this.errorsFor(b);
                d.length ? (d.removeClass(this.settings.validClass).addClass(this.settings.errorClass), d.attr("generated") && d.html(c)) : (d = a("<" + this.settings.errorElement + "/>").attr({
                    "for": this.idOrName(b),
                    generated: !0
                }).addClass(this.settings.errorClass).html(c || ""), this.settings.wrapper && (d = d.hide().show().wrap("<" + this.settings.wrapper + "/>").parent()), this.labelContainer.append(d).length || (this.settings.errorPlacement ? this.settings.errorPlacement(d, a(b)) : d.insertAfter(b))), !c && this.settings.success && (d.text(""), "string" == typeof this.settings.success ? d.addClass(this.settings.success) : this.settings.success(d, b)), this.toShow = this.toShow.add(d)
            },
            errorsFor: function(b) {
                var c = this.idOrName(b);
                return this.errors().filter(function() {
                    return a(this).attr("for") === c
                })
            },
            idOrName: function(a) {
                return this.groups[a.name] || (this.checkable(a) ? a.name : a.id || a.name)
            },
            validationTargetFor: function(a) {
                return this.checkable(a) && (a = this.findByName(a.name).not(this.settings.ignore)[0]), a
            },
            checkable: function(a) {
                return /radio|checkbox/i.test(a.type)
            },
            findByName: function(b) {
                return a(this.currentForm).find('[name="' + b + '"]')
            },
            getLength: function(b, c) {
                switch (c.nodeName.toLowerCase()) {
                    case "select":
                        return a("option:selected", c).length;
                    case "input":
                        if (this.checkable(c)) return this.findByName(c.name).filter(":checked").length
                }
                return b.length
            },
            depend: function(a, b) {
                return this.dependTypes[typeof a] ? this.dependTypes[typeof a](a, b) : !0
            },
            dependTypes: {
                "boolean": function(a) {
                    return a
                },
                string: function(b, c) {
                    return !!a(b, c.form).length
                },
                "function": function(a, b) {
                    return a(b)
                }
            },
            optional: function(b) {
                var c = this.elementValue(b);
                return !a.validator.methods.required.call(this, c, b) && "dependency-mismatch"
            },
            startRequest: function(a) {
                this.pending[a.name] || (this.pendingRequest++, this.pending[a.name] = !0)
            },
            stopRequest: function(b, c) {
                this.pendingRequest--, this.pendingRequest < 0 && (this.pendingRequest = 0), delete this.pending[b.name], c && 0 === this.pendingRequest && this.formSubmitted && this.form() ? (a(this.currentForm).submit(), this.formSubmitted = !1) : !c && 0 === this.pendingRequest && this.formSubmitted && (a(this.currentForm).triggerHandler("invalid-form", [this]), this.formSubmitted = !1)
            },
            previousValue: function(b) {
                return a.data(b, "previousValue") || a.data(b, "previousValue", {
                    old: null,
                    valid: !0,
                    message: this.defaultMessage(b, "remote")
                })
            }
        },
        classRuleSettings: {
            required: {
                required: !0
            },
            email: {
                email: !0
            },
            url: {
                url: !0
            },
            date: {
                date: !0
            },
            dateISO: {
                dateISO: !0
            },
            number: {
                number: !0
            },
            digits: {
                digits: !0
            },
            creditcard: {
                creditcard: !0
            }
        },
        addClassRules: function(b, c) {
            b.constructor === String ? this.classRuleSettings[b] = c : a.extend(this.classRuleSettings, b)
        },
        classRules: function(b) {
            var c = {},
                d = a(b).attr("class");
            return d && a.each(d.split(" "), function() {
                this in a.validator.classRuleSettings && a.extend(c, a.validator.classRuleSettings[this])
            }), c
        },
        attributeRules: function(b) {
            var c = {},
                d = a(b);
            for (var e in a.validator.methods) {
                var f;
                "required" === e ? (f = d.get(0).getAttribute(e), "" === f && (f = !0), f = !!f) : f = d.attr(e), f ? c[e] = f : d[0].getAttribute("type") === e && (c[e] = !0)
            }
            return c.maxlength && /-1|2147483647|524288/.test(c.maxlength) && delete c.maxlength, c
        },
        metadataRules: function(b) {
            if (!a.metadata) return {};
            var c = a.data(b.form, "validator").settings.meta;
            return c ? a(b).metadata()[c] : a(b).metadata()
        },
        staticRules: function(b) {
            var c = {},
                d = a.data(b.form, "validator");
            return d.settings.rules && (c = a.validator.normalizeRule(d.settings.rules[b.name]) || {}), c
        },
        normalizeRules: function(b, c) {
            return a.each(b, function(d, e) {
                if (e === !1) return delete b[d], void 0;
                if (e.param || e.depends) {
                    var f = !0;
                    switch (typeof e.depends) {
                        case "string":
                            f = !!a(e.depends, c.form).length;
                            break;
                        case "function":
                            f = e.depends.call(c, c)
                    }
                    f ? b[d] = void 0 !== e.param ? e.param : !0 : delete b[d]
                }
            }), a.each(b, function(d, e) {
                b[d] = a.isFunction(e) ? e(c) : e
            }), a.each(["minlength", "maxlength", "min", "max"], function() {
                b[this] && (b[this] = Number(b[this]))
            }), a.each(["rangelength", "range"], function() {
                b[this] && (b[this] = [Number(b[this][0]), Number(b[this][1])])
            }), a.validator.autoCreateRanges && (b.min && b.max && (b.range = [b.min, b.max], delete b.min, delete b.max), b.minlength && b.maxlength && (b.rangelength = [b.minlength, b.maxlength], delete b.minlength, delete b.maxlength)), b.messages && delete b.messages, b
        },
        normalizeRule: function(b) {
            if ("string" == typeof b) {
                var c = {};
                a.each(b.split(/\s/), function() {
                    c[this] = !0
                }), b = c
            }
            return b
        },
        addMethod: function(b, c, d) {
            a.validator.methods[b] = c, a.validator.messages[b] = void 0 !== d ? d : a.validator.messages[b], c.length < 3 && a.validator.addClassRules(b, a.validator.normalizeRule(b))
        },
        methods: {
            required: function(b, c, d) {
                if (!this.depend(d, c)) return "dependency-mismatch";
                if ("select" === c.nodeName.toLowerCase()) {
                    var e = a(c).val();
                    return e && e.length > 0
                }
                return this.checkable(c) ? this.getLength(b, c) > 0 : a.trim(b).length > 0
            },
            remote: function(b, c, d) {
                return; // Not trusting AJAX request, sorry BP, I'll enable it once I take a closer look ;)

                if (this.optional(c)) return "dependency-mismatch";
                var e = this.previousValue(c);
                if (this.settings.messages[c.name] || (this.settings.messages[c.name] = {}), e.originalMessage = this.settings.messages[c.name].remote, this.settings.messages[c.name].remote = e.message, d = "string" == typeof d && {
                        url: d
                    } || d, this.pending[c.name]) return "pending";
                if (e.old === b) return e.valid;
                e.old = b;
                var f = this;
                this.startRequest(c);
                var g = {};
                return g[c.name] = b, a.ajax(a.extend(!0, {
                    url: d,
                    mode: "abort",
                    port: "validate" + c.name,
                    dataType: "json",
                    data: g,
                    success: function(d) {
                        f.settings.messages[c.name].remote = e.originalMessage;
                        var g = d === !0 || "true" === d;
                        if (g) {
                            var h = f.formSubmitted;
                            f.prepareElement(c), f.formSubmitted = h, f.successList.push(c), delete f.invalid[c.name], f.showErrors()
                        } else {
                            var i = {},
                                j = d || f.defaultMessage(c, "remote");
                            i[c.name] = e.message = a.isFunction(j) ? j(b) : j, f.invalid[c.name] = !0, f.showErrors(i)
                        }
                        e.valid = g, f.stopRequest(c, g)
                    }
                }, d)), "pending"
            },
            minlength: function(b, c, d) {
                var e = a.isArray(b) ? b.length : this.getLength(a.trim(b), c);
                return this.optional(c) || e >= d
            },
            maxlength: function(b, c, d) {
                var e = a.isArray(b) ? b.length : this.getLength(a.trim(b), c);
                return this.optional(c) || d >= e
            },
            rangelength: function(b, c, d) {
                var e = a.isArray(b) ? b.length : this.getLength(a.trim(b), c);
                return this.optional(c) || e >= d[0] && e <= d[1]
            },
            min: function(a, b, c) {
                return this.optional(b) || a >= c
            },
            max: function(a, b, c) {
                return this.optional(b) || c >= a
            },
            range: function(a, b, c) {
                return this.optional(b) || a >= c[0] && a <= c[1]
            },
            email: function(a, b) {
                return this.optional(b) || /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]{2,}|[\x5d-\x7e]{2,}|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,})|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]{2,}|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,})|(([a-z]{2,}|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,})([a-z]{2,}|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,})*([a-z]{2,}|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,})))$/i.test(a)
            },
            url: function(a, b) {
                return this.optional(b) || /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(a)
            },
            date: function(a, b) {
                return this.optional(b) || !/Invalid|NaN/.test(new Date(a))
            },
            dateISO: function(a, b) {
                return this.optional(b) || /^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/.test(a)
            },
            number: function(a, b) {
                return this.optional(b) || /^-?(?:\d+|\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(a)
            },
            digits: function(a, b) {
                return this.optional(b) || /^\d+$/.test(a)
            },
            creditcard: function(a, b) {
                if (this.optional(b)) return "dependency-mismatch";
                if (/[^0-9 \-]+/.test(a)) return !1;
                var c = 0,
                    d = 0,
                    e = !1;
                a = a.replace(/\D/g, "");
                for (var f = a.length - 1; f >= 0; f--) {
                    var g = a.charAt(f);
                    d = parseInt(g, 10), e && (d *= 2) > 9 && (d -= 9), c += d, e = !e
                }
                return 0 === c % 10
            },
            equalTo: function(b, c, d) {
                var e = a(d);
                return this.settings.onfocusout && e.unbind(".validate-equalTo").bind("blur.validate-equalTo", function() {
                    a(c).valid()
                }), b === e.val()
            }
        }
    }), a.format = a.validator.format
}(jQuery),
function(a) {
    var b = {};
    if (a.ajaxPrefilter) a.ajaxPrefilter(function(a, c, d) {
        var e = a.port;
        "abort" === a.mode && (b[e] && b[e].abort(), b[e] = d)
    });
    else {
        var c = a.ajax;
        a.ajax = function(d) {
            return; // Not trusting AJAX request, sorry BP, I'll enable it once I take a closer look ;)

            var e = ("mode" in d ? d : a.ajaxSettings).mode,
                f = ("port" in d ? d : a.ajaxSettings).port;
            return "abort" === e ? (b[f] && b[f].abort(), b[f] = c.apply(this, arguments)) : c.apply(this, arguments)
        }
    }
}(jQuery),
function(a) {
    !jQuery.event.special.focusin && !jQuery.event.special.focusout && document.addEventListener && a.each({
        focus: "focusin",
        blur: "focusout"
    }, function(b, c) {
        function d(b) {
            return b = a.event.fix(b), b.type = c, a.event.handle.call(this, b)
        }
        a.event.special[c] = {
            setup: function() {
                this.addEventListener(b, d, !0)
            },
            teardown: function() {
                this.removeEventListener(b, d, !0)
            },
            handler: function(b) {
                var d = arguments;
                return d[0] = a.event.fix(b), d[0].type = c, a.event.handle.apply(this, d)
            }
        }
    }), a.extend(a.fn, {
        validateDelegate: function(b, c, d) {
            return this.bind(c, function(c) {
                var e = a(c.target);
                return e.is(b) ? d.apply(e, arguments) : void 0
            })
        }
    })
}(jQuery), window.log = function() {
        if (log.history = log.history || [], log.history.push(arguments), this.console) {
            var b, a = arguments;
            a.callee = a.callee.caller, b = [].slice.call(a), "object" == typeof console.log ? log.apply.call(console.log, console, b) : console.log.apply(console, b)
        }
    },
    function() {
        var a = jQuery.noConflict(!0);
        a(function() {
            var b = function() {};
            b.prototype.closeErrorOverlay = function(b) {
                ("undefined" == typeof b || b.currentTarget == b.target || "keypress" === b.type) && (a(".bgcdw_errors_all_wrapper").fadeOut(), a(document).off("keypress"))
            }, b.prototype.handleServerSideGeneratedErrors = function() {
                var b = a(".bgcdw_errors_all"),
                    c = "bgcdw_errors",
                    d = "div";
                a(".bgc_signup_container input,.bgcdw_login_container input#fb-connect-login-form-container input").each(function() {
                    var b = a(this);
                    b.next(d).hasClass(c) && b.addClass(c)
                }), a("div.bgcdw_errors:not([generated])").each(function() {
                    var b = a(this);
                    b.attr("generated", "true");
                    var c = b.attr("for");
                    if ("undefined" == typeof c || c === !1) {
                        var d = b.prevAll("input").attr("id");
                        b.attr("for", d)
                    }
                }), 1 == a("ul", b).length && a("ul li", b).last().css("margin-bottom", "0");
                var e = this;
                a(".bgcdw_errors_all_close, .bgcdw_errors_all_wrapper").on("mouseup", e.closeErrorOverlay), a(document).on("keypress", function(a) {
                    (27 == a.keyCode || 13 == a.keyCode) && e.closeErrorOverlay(a)
                })
            }, b.prototype.getErrorTranslation = function(b) {
                return '<ul data-error="' + b + '"><li>' + a('.bgc_error_translations div[data-error-key="' + b + '"]').eq(0).text() + "</li></ul>"
            }, b.prototype.addFormPlaceholders = function(b) {
                var c = this.findForms(b);
                a("input", c).each(function() {
                    var b = a(this).prev("label");
                    a(this).attr("placeholder", b.text()), !1 == "placeholder" in document.createElement("input") && (function(a) {
                        a.extend(a, {
                            placeholder: {
                                browser_supported: function() {
                                    return void 0 !== this._supported ? this._supported : this._supported = !!("placeholder" in a('<input type="text">')[0])
                                },
                                shim: function(b) {
                                    var c = {
                                        cls: "placeholder-fallback",
                                        selector: "input[placeholder], textarea[placeholder]"
                                    };
                                    return a.extend(c, b), !this.browser_supported() && a(c.selector)._placeholder_shim(c)
                                }
                            }
                        }), a.extend(a.fn, {
                            _placeholder_shim: function(b) {
                                function c(b) {
                                    var c = a(b).offsetParent().offset(),
                                        d = a(b).offset();
                                    return {
                                        top: d.top - c.top,
                                        left: d.left - c.left,
                                        width: a(b).width()
                                    }
                                }

                                function d(b) {
                                    var e = b.data("target");
                                    void 0 !== e && (b.css(c(e)), a(window).one("resize", function() {
                                        d(b)
                                    }))
                                }
                                return this.each(function() {
                                    var e = a(this);
                                    if (e.is(":visible")) {
                                        if (e.data("placeholder")) {
                                            var f = e.data("placeholder");
                                            return f.css(c(e)), !0
                                        }
                                        var g = {};
                                        e.is("textarea") || "auto" == e.css("height") || (g = {
                                            lineHeight: e.css("height"),
                                            whiteSpace: "nowrap"
                                        });
                                        var h = a("<span />").text(e.attr("placeholder")).addClass(b.cls).css(a.extend({
                                            position: "absolute",
                                            display: "inline",
                                            "float": "none",
                                            overflow: "hidden",
                                            textAlign: "left",
                                            cursor: "text",
                                            paddingTop: e.css("padding-top"),
                                            paddingRight: e.css("padding-right"),
                                            paddingBottom: e.css("padding-bottom"),
                                            paddingLeft: e.css("padding-left"),
                                            fontSize: e.css("font-size"),
                                            fontFamily: e.css("font-family"),
                                            fontStyle: e.css("font-style"),
                                            fontWeight: e.css("font-weight"),
                                            textTransform: e.css("text-transform"),
                                            backgroundColor: "transparent",
                                            zIndex: 99
                                        }, g)).css(c(this)).attr("for", this.id).data("target", e).click(function() {
                                            a(this).data("target").focus()
                                        }).insertBefore(this);
                                        e.data("placeholder", h).focus(function() {
                                            h.hide()
                                        }).blur(function() {
                                            h[e.val().length ? "hide" : "show"]()
                                        }).triggerHandler("blur"), a(window).one("resize", function() {
                                            d(h)
                                        })
                                    }
                                })
                            }
                        })
                    }(a), a.placeholder.shim())
                })
            }, b.prototype.hideFormLabels = function(b) {
                var c = this.findForms(b);
                c.addClass("no-labels"), a("label", c).hide(), a(".bgc_signup_form_legal label").show()
            }, b.prototype.findForms = function(b) {
                switch (b) {
                    case "login":
                        return a(".bgcdw_login_container");
                    case "signup":
                        return a("#bgc_signup_container");
                    case "signupshort":
                        return a("#bgc_signup_short_container");
                    default:
                        return a(b)
                }
            }, a.validator.addMethod("notEqualTo", function(b, c, d) {
                return this.optional(c) || b != a(d).val()
            }, "Username must be different from password."), a.validator.addMethod("noSpecialChars", function(a, b) {
                var c = /[ <>@+'&%,?]/i;
                return this.optional(b) || c.test(a) === !1 ? !0 : !1
            }), a.validator.addMethod("validDate", function(a, b) {
                var c = !1,
                    e = a.split("."),
                    f = parseInt(e[0], 10),
                    g = parseInt(e[1], 10),
                    h = parseInt(e[2], 10);
                return c = g > 0 && 13 > g && h > 0 && 32768 > h && f > 0 && f <= new Date(h, g, 0).getDate(), c && (isInFuture = new Date(h, g - 1, f) > new Date), this.optional(b) || c && !isInFuture
            }), a.validator.addMethod("emailBgc", function(a, b) {
                var c = "[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*",
                    d = "[a-zA-Z0-9\xfc\xe4\xf6\xdc\xc4\xd6]([-_.]?[a-zA-Z0-9\xfc\xe4\xf6\xdc\xc4\xd6])+\\.[a-zA-Z]{2,6}",
                    e = new RegExp("^" + c + "@" + d + "$");
                return this.optional(b) || e.test(a)
            }), a.validator.addMethod("notEqualToPlaceholder", function(b, c) {
                var e = a(c);
                return e.val() !== e.attr("placeholder")
            }), b.prototype.initFormValidation = function() {
                var b = this;
                a(".bgcdw_date_fields select").on("change", function() {
                    b.copyDateToHiddenField();
                    var d = a(".bgc_signup_form").first().validate().element("#birthdateValidate"),
                        e = a("#birthdateValidate"),
                        f = e.prevAll(".bgcdw_date_fields"),
                        g = "bgcdw_errors_date";
                    !1 === d ? f.addClass(g) : f.removeClass(g), a(".bgc_signup_form .bgcdw_date_fields").find(".bgcdw_errors").not('[generated="true"]').hide()
                }), a("#bgc_signup_container #bgc_signup_form_password").on("blur", function() {
                    setTimeout(function() {
                        var b = "#bgc_signup_form_passwordTwo";
                        !1 === a(document.activeElement).is(b) && a(".bgc_signup_form").first().validate().element(b)
                    })
                });
                var b = this;
                a(".bgcdw_login_form").each(function() {
                    a(this).validate({
                        errorClass: "bgcdw_errors",
                        errorElement: "div",
                        onkeyup: function(b) {
                            var c = a(b);
                            c.hasClass(this.settings.errorClass) && c.valid()
                        },
                        onfocusout: !1,
                        rules: {
                            username: {
                                required: !0,
                                notEqualToPlaceholder: !0
                            },
                            password: {
                                required: !0,
                                notEqualToPlaceholder: !0
                            }
                        },
                        messages: {
                            username: {
                                required: b.getErrorTranslation("gl.error.username_6"),
                                notEqualToPlaceholder: b.getErrorTranslation("gl.error.username_6")
                            },
                            password: {
                                required: b.getErrorTranslation("gl.error.password_8"),
                                notEqualToPlaceholder: b.getErrorTranslation("gl.error.password_8")
                            }
                        },
                        submitHandler: function(b) {
                            a('.bgcdw_login_form_login[type="submit"]').attr("disabled", "disabled"), b.submit()
                        }
                    })
                }), a(".bgc_signup_form").first().validate({
                    errorClass: "bgcdw_errors",
                    errorElement: "div",
                    ignore: "",
                    onkeyup: function(b) {
                        var c = a(b);
                        c.hasClass(this.settings.errorClass) && c.valid();
                        var d = a("#bgc_signup_container #bgc_signup_form_passwordTwo");
                        if ("password" == c.attr("name") && d.length > 0) {
                            var e = d.rules();
                            d.rules("remove"), d.val(""), d.valid(), d.rules("add", e)
                        }
                    },
                    onfocusout: function(b) {
                        var c = this,
                            d = a(b),
                            e = "#bgc_signup_form_password";
                        "username" === d.attr("name") && d.val() === a(e).val() && "" !== d.val() && c.element(e), c.element(b)
                    },
                    rules: {
                        username: {
                            required: !0,
                            noSpecialChars: !0
                        },
                        password: {
                            required: !0,
                            notEqualTo: "#bgc_signup_form_username"
                        },
                        passwordTwo: {
                            equalTo: "#bgc_signup_form_password"
                        },
                        birthdateValidate: {
                            validDate: !0
                        },
                        email: {
                            email: !1,
                            emailBgc: !0,
                            required: !0
                        },
                        termsAndConditions: {
                            required: !0
                        },
                        recaptcha_response_field: {
                            required: !0
                        }
                    },
                    messages: {
                        username: {
                            required: this.getErrorTranslation("gl.error.username_1"),
                            minlength: this.getErrorTranslation("gl.error.username_1"),
                            noSpecialChars: this.getErrorTranslation("gl.error.username_3")
                        },
                        password: {
                            minlength: this.getErrorTranslation("gl.error.password_1"),
                            required: this.getErrorTranslation("gl.error.password_1"),
                            notEqualTo: this.getErrorTranslation("gl.error.password_7")
                        },
                        passwordTwo: {
                            equalTo: this.getErrorTranslation("gl.error.password_6")
                        },
                        email: {
                            required: this.getErrorTranslation("gl.error.email_1"),
                            emailBgc: this.getErrorTranslation("gl.error.email_1")
                        },
                        birthdateValidate: {
                            validDate: this.getErrorTranslation("gl.error.birthday_1")
                        },
                        termsAndConditions: {
                            required: this.getErrorTranslation("gl.error.termsAndConditions_2")
                        },
                        recaptcha_response_field: {
                            required: this.getErrorTranslation("gl.error.captcha_1")
                        }
                    },
                    submitHandler: function(b) {
                        a('.bgc_signup_form_register[type="submit"]').attr("disabled", "disabled"), b.submit()
                    }
                }), a(".bgc_fbSignup_form").first().validate({
                    errorClass: "bgcdw_errors",
                    errorElement: "div",
                    ignore: "",
                    onkeyup: function(b) {
                        var c = a(b);
                        c.hasClass(this.settings.errorClass) && c.valid()
                    },
                    rules: {
                        username: {
                            required: !0,
                            minlength: 4,
                            noSpecialChars: !0
                        }
                    },
                    messages: {
                        username: {
                            required: this.getErrorTranslation("gl.error.username_1"),
                            minlength: this.getErrorTranslation("gl.error.username_1"),
                            noSpecialChars: this.getErrorTranslation("gl.error.username_3")
                        }
                    },
                    submitHandler: function(b) {
                        a('.bgc_fbSignup_form_signup[type="submit"]').attr("disabled", "disabled"), b.submit()
                    }
                });
                var b = this;
                a(".bgc_fbConnect_form").each(function() {
                    a(this).validate({
                        errorClass: "bgcdw_errors",
                        errorElement: "div",
                        onkeyup: function(b) {
                            var c = a(b);
                            c.hasClass(this.settings.errorClass) && c.valid()
                        },
                        rules: {
                            username: {
                                required: !0,
                                notEqualToPlaceholder: !0
                            },
                            password: {
                                required: !0,
                                notEqualToPlaceholder: !0
                            }
                        },
                        messages: {
                            username: {
                                required: b.getErrorTranslation("gl.error.username_6"),
                                notEqualToPlaceholder: b.getErrorTranslation("gl.error.username_6")
                            },
                            password: {
                                required: b.getErrorTranslation("gl.error.password_8"),
                                notEqualToPlaceholder: b.getErrorTranslation("gl.error.password_8")
                            }
                        },
                        submitHandler: function(b) {
                            a('.bgc_fbConnect_form_connect[type="submit"]').attr("disabled", "disabled"), b.submit()
                        }
                    })
                })
            }, b.prototype.copyDateToHiddenField = function() {
                var b = a('select[name="birthdateDay"]').val() + "." + a('select[name="birthdateMonth"]').val() + "." + a('select[name="birthdateYear"]').val();
                a("#birthdateValidate").val(b)
            }, b.prototype.enhanceFacebookForms = function() {
                var b = this;
                this.activateForm = function(c) {
                    $formActive = a(c), $formSiblings = $formActive.siblings(), b.hideForms($formSiblings), b.showForm($formActive)
                }, this.showForm = function(b) {
                    b.removeClass("bgc_fbconnect_disabled"), b.children().not("span, div.bgcdw_errors ul").animate({
                        opacity: 1
                    }, 200), a('input[type="submit"]', b).fadeIn()
                }, this.hideForms = function(b) {
                    b.addClass("bgc_fbconnect_disabled"), b.children().not("span, div.bgcdw_errors ul").animate({
                        opacity: .3
                    }, 200), a('input[type="submit"]', b).fadeOut(), a('input[type="password"]', b).val(""), a('input[type="text"]', b).val(""), b.find("form").length > 0 && (b.find("form").validate().resetForm(), b.find(".bgcdw_errors_flash").remove())
                };
                var b = this;
                a('.bgc_fbconnect_link div[class^="bgcdw_errors"]').length > 0 && b.activateForm(a(".bgc_fbconnect_link")), a('.bgc_fbconnect_signup div[class^="bgcdw_errors"]').length > 0 && b.activateForm(a(".bgc_fbconnect_signup")), a("#bgc_fbconnect_wrapper .bgcdw_errors_flash").each(function() {
                    var b = a(this).parentsUntil("#bgc_fbconnect_wrapper").last();
                    a(this).appendTo(b)
                }), a("#bgc_fbconnect_wrapper > div,#bgc_fbconnect_wrapper input").on("click focus", function(c) {
                    "click" === c.type ? b.activateForm(a(this)) : b.activateForm(a(this).parentsUntil("#bgc_fbconnect_wrapper").last())
                })
            }, b.prototype.preventMultipleFbConnectClicks = function() {
                a(".bgc_fbConnect_container_link .bgc_fbConnect").click(function() {
                    var b = a(this).attr("href");
                    a(this).attr("href", "javascript: void(0)"), window.location = b
                })
            }, b.prototype.configuration = {
                config: [],
                getConfig: function(b) {
                    return a("#bgc_sasform_config_" + b).attr("value")
                },
                setConfig: function(b, c) {
                    a("#bgc_sasform_config_" + b).val(c)
                },
                splitSelectors: function(a) {
                    return a.split(/[ ,]+/)
                },
                load: function() {
                    var b = [];
                    return a("input", "#bgc_sasform_config").each(function() {
                        var c = a(this),
                            d = c.val();
                        "true" === d ? d = !0 : "false" === d && (d = !1), b[c.attr("name")] = d
                    }), b
                }
            };
            var c = new b;
            c.initFormValidation(), c.copyDateToHiddenField();
            var d = c.configuration.load();
            if ("hidelabels" in d) {
                var e = c.configuration.splitSelectors(d.hidelabels);
                for (i in e) c.hideFormLabels(e[i])
            }
            if ("placeholder" in d) {
                var f = c.configuration.splitSelectors(d.placeholder);
                for (i in f) c.addFormPlaceholders(f[i])
            }
            if ("errors-login" in d && "popup" === d["errors-login"]) {
                var g = a(".bgcdw_login_container .bgcdw_errors_flash");
                g.length > 0 && (g.hide(), a(".bgcdw_errors_all_wrapper").show())
            }
            if ("errors-signup" in d && "popup" === d["errors-signup"]) {
                var h = a("#bgc_signup_container .bgcdw_errors_flash, #bgc_signup_container div.bgcdw_errors");
                h.length > 0 && (h.hide(), a(".bgcdw_errors_all_wrapper").show())
            }
            if ("errors-facebook" in d && "popup" === d["errors-facebook"]) {
                var j = a(".bgc_fbconnect_link .bgcdw_errors_flash, .bgc_fbconnect_signup div.bgcdw_errors");
                j.length > 0 && (j.hide(), a(".bgcdw_errors_all_wrapper").show())
            }
            c.handleServerSideGeneratedErrors(), c.preventMultipleFbConnectClicks(), c.enhanceFacebookForms()
        })
    }();
